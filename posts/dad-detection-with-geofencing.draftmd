+++
title = "Dad detection with Fencer.io and Puck.js"
description = "Pocket Bluetooth alarms for the kids. Never not know when Dad is almost home again"
date = "2018-04-16T10:38:39+01:00"
tags = [
	"fencer.io",
    "espruino",
    "puck.js",
	"pizerow",
	"golang",
]

categories = [
    "IoT",
]

draft: true
+++

## Pocket Bluetooth alarms for the Kids. Never "not know" when Dad is almost home from work again!!

### Background

If you're a TL;DR; type [skip to this part](#start).

A bit ago, I built an application called [Fencer](https://fencer.io), it offers geofencing as a service. If you're not familiar with geofences, think of them as virtual boundaries overlayed on the real world. 

Fencer not only helps developers build and manage geofences, it allows them to easilly use geofences in their applications - querying any given position, described by a lat/lng coordinate pair to find out if it is inside or outside a virtual boundary.

Fencer is ideal for client/server style apps, where the application that sends users' lat/lng positions to Fencer, is also the application that would like to act upon the result, but Fencer currently isn't ideal where the client application is only required to provide users' position and it is a third party application that needs to act upon the result.

Enter Froxy. [Froxy](https://github.com/olliephillips/froxy) is a proxy for Fencer. It allows third party applications to work with the Fencer API, and be notified of events via websocket, webhook, or both.

In this slightly contrived tutorial, I build Bluetooth alarms using Fencer, Froxy and Puck.js - a bluetooth beacon - that will alert my kids when I'm on my way home from work. 

For, with such knowledge, I'm sure they'll get off their games consoles, tidy their rooms, let the dog out for a wazz, and, maybe, even put the kettle on for old Dad. 

Won't they? Well, one can hope. But let's build this application anyway.

Let's quickly look at the steps involved.

1. Create a geofence on Fencer  
2. Install and configure Froxy
3. Write a simple HTML client to report Dad's position
4. Assemble and program our Puck.js devices to function as personal alarms
5. Write application to listen to Froxy over websocket and control the personal alarms
<br/><br/>
So, there's a number of pieces to this tutorial, but don't be deterred, all the source code you need is provided.

<a name="start"/></a>
### One step at a time

#### 1. Create a geofence on Fencer

This is simple. Create an account (it's free for what we need), and then create a geofence. The geofence should represent an area that you, as a fellow Dad (or Mum) will have to pass into on your way home. Save it.

You need to grab two pieces of data for the next step. Your API Key and the 
Access Key of the geofence you've just created.

Should we wish to modify the geofence at a later stage we can. Log in, select the geofence and alter the boundary as you wish.

Otherwise, we're done with Fencer.

#### 2. Install and configure Froxy

Froxy is a an application written in Go. If you use Go you'll know how to build this yourself, but there are [binaries here](https://github.com/olliephillips/froxy/releases) for Linux, Mac and Windows which you can download.

Hopefully there's decent [documentation for Froxy here](https://github.com/olliephillips/froxy/blob/master/README.md) so we're going to move straight to the ```config.toml``` file we need to tell Froxy what it should do.

We're proxying a single geofence and we only plan to allow notifications over websocket so setup is not hard. The file is [TOML format](https://en.wikipedia.org/wiki/TOML), but is simple to parse.

```
## froxy configuration file

apikey 		= 	"344b7b59-xxxx-xxxxx"

[[geofence]]
alias 		= 	"Village" 
accesskey 	= 	"3xxxx87-fcb5-xx"
websocket 	= 	true
```
<br/>
So we include the API key for our fencer account since Froxy will make the requests to Fencer, and for the single Geofence we add an alias, provide the Access key for the geofence (also given to us by Fencer in step 1), and then enable websockets.

In order to receive requests, ideally you'd host this application on a web server connected to the Internet. Running it locally on your LAN would mean the client making requests also needs to be connected to the same network. Ok for testing, but not for real world dad tracking.

We can start Froxy now - it will start listening on `localhost:9000`.

Once started, Froxy exposes two URL endpoints, one which will listen for requests from the client application we'll write, and proxy them to Fencer, and a second, which will provide a websocket connection, over which, Froxy will notify our alarm application when Dad (or Mum) enters the geofence we set up, in this case one that bounds our village.

The call from the client looks like this - it is a simple GET request and that's the geofence access key on the end of it:

```
http://localhost:9000/client/3xxxx87-fcb5-xx
```
<br/>
Three request headers are needed to be sent with the request. These are `client-id`, `lat-pos`, and `lng-pos`. `client-id` allows us to understand who the user is - we could have more than one - the other two headers represent latitude and a longitude position of the user.

The client we build later will handle all this. 

Our alarm application will connect using websocket to this URL - again that's the geofence access key on the end:

```
ws://localhost:9000/ws/3xxxx87-fcb5-xx
```
<br/>

Whenever the client enters or exits the geofence, Froxy will push a JSON payload over the websocket like the following.

```
{
 "client_id":"Dad",
 "geofence_alias":"Village",
 "lat_pos":"53.345239",
 "lng_pos":"-2.839349",
 "inside":true
}
```
<br/>
The only piece we're interested in for our alarm application is the `inside` property which will be `true` when entering the geofence and `false` when exiting. 

That's Froxy up and running.

### 3. Write a simple HTML client to report Dad's position

I've saved you the bother. Just load this page on a mobile web browser and allow the browser to know your location.

Since the client application is entirely comprised of HTML, Javascript and CSS you can use as the basis for your own tracking client should you wish.

The best bit about this client though, is an included Javascript library called [noSleep.js](https://github.com/richtr/NoSleep.js). Normally a mobile browser will go to the background after a certain period, but with noSleep.js it stays active, so calls to Froxy are never interrupted. Using this we should get a good fix on Dad.


#### 4. Assemble and program our Puck.js devices to function as personal alarms

Puck.js is a part of the [Espruino](https://www.espruino.com/) family and I've written about them before [here](https://slippytrumpet.io/posts/a-little-bit-of-web-bluetooth/) and [here](https://slippytrumpet.io/posts/webbluetooth-to-mqtt-gateway/). 

But, essentially, Puck.js is a Bluetooth LE capable device that is programmable using JavaScript. It's runs off a CR2032 3v coin cell battery - for a long time.

It has some built in LEDs - ideal for our alarm - amongst other goodies like magnetometer, but I wanted something audible, so soldered a piezo 3v buzzer (between pins D1 and GND), on to each of the Pucks I'm using.

picture

Pucks can advertise as any Bluetooth LE service, but by default they only advertise the UART (serial) service, as this is required to program them over bluetooth.

The UART service will be sufficient for our application, our application, will control these Pucks over UART, but to rather than send all the code to make the alarm work, and to make life easier, we;ll write a few simple functions and save these to the Pucks. This way this other application only needs to call functions over bluetooth, rather than send lots of code.

This is the javascript we upload to the Pucks, the comments cover what the functions should do:

```
// dadAlarm.js
// puck.js script for trigger status
// lights and sounding buzzer

// alarm function flashes red led
// every 1/2 second and sounds buzzer
function alarm(duration) {
  var toggle = false;
  //reset
  stop();
  // set duration
  if(duration > 0) {
    d = duration;
  } else {
    d = 30;
  }
  setTimeout(function(){
    stop();
  },d * 1000);
  // start
  setInterval(function(){
    toggle = !toggle;
    digitalWrite(LED1, toggle);
    // buzzer
    analogWrite(D1, 0.5, { freq: 750 } );
  },500);
}

// status ok function flickers green
// led every 5 seconds
function ok() {
  var toggle = false;
  // reset
  stop();
  // start
  setInterval(function(){
    toggle = !toggle;
    setTimeout(function(){
      digitalWrite(LED2, false);
    },50); 
    digitalWrite(LED2, toggle); 
  },5000);
}

// stops & clears everything
function stop() {
  clearInterval();
  LED1.reset();
  LED2.reset();
  digitalWrite(D1, 0);
}
```
<br/>
This code is also available [here](https://gist.github.com/olliephillips/42b3dc631cae231aab918ae606d90342).

 With this code uploaded to all the Pucks we want to use to notify of impending 'dad', our personal alarms are built and ready to use.


#### 5. Write application to listen to Froxy over websocket and control the personal alarms

Application's job is to listen for messages from Froxy over the websocket and act on them.

I wrote this and you can [get it here](). It's written in such a way that you can pass the Access key of the geofence you want to monitor, so you could use it too. 

But, anything that can establish a websocket connection would work here - including a web page.



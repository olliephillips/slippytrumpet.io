<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Slippytrumpet - My blog on the technologies that have been messing with me</title><link>https://slippytrumpet.io/posts/</link><description>Recent content in Posts on Slippytrumpet - My blog on the technologies that have been messing with me</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 12 Nov 2019 15:27:33 +0100</lastBuildDate><atom:link href="https://slippytrumpet.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>How to make money with Crypto via ITOs and tokens (Part 2) - Draft</title><link>https://slippytrumpet.io/2019/11/how-to-make-money-with-crypto-via-itos-and-tokens-part-2/</link><pubDate>Tue, 12 Nov 2019 15:27:33 +0100</pubDate><guid>https://slippytrumpet.io/2019/11/how-to-make-money-with-crypto-via-itos-and-tokens-part-2/</guid><description>It is possible to make money on Cryptocurrencies, in an interesting but short window post ITO (Initial Token Offering). In this second of three installments we get to it! In part 1 we set the scene, and I left you with this teaser - the key to this is liquidity, or rather the lack of liquidity. It&amp;rsquo;s also about information, and we&amp;rsquo;ll get to that too.
Let&amp;rsquo;s pick it up there.</description></item><item><title>How to make money with Crypto via ITOs and tokens (Part 1)</title><link>https://slippytrumpet.io/2019/11/how-to-make-money-with-crypto-via-itos-and-tokens-part-1/</link><pubDate>Mon, 11 Nov 2019 17:27:33 +0100</pubDate><guid>https://slippytrumpet.io/2019/11/how-to-make-money-with-crypto-via-itos-and-tokens-part-1/</guid><description>It is possible to make money on Cryptocurrencies, in an interesting but short window post ITO (Initial Token Offering). Trust me there&amp;rsquo;s more here than a clickbait title, but first we need to introduce our subject. When people think of Cryptocurrencies, if they know what they are, they think of Bitcoin first, and maybe the altcoins, of which there are many, such as Litecoin and Ethereum, to name just two.</description></item><item><title>Sett, a BadgerDB abstraction</title><link>https://slippytrumpet.io/2018/05/sett-a-badgerdb-abstraction/</link><pubDate>Fri, 04 May 2018 10:08:30 +0100</pubDate><guid>https://slippytrumpet.io/2018/05/sett-a-badgerdb-abstraction/</guid><description>A little Go package to make BadgerDB easier (for me) to work with I&amp;rsquo;ve noticed that as an &amp;ldquo;older&amp;rdquo; developer, often, one of the first things I&amp;rsquo;ll do with a new package/API I&amp;rsquo;m using, is abstract it into just the bits I need and/or that my cognitive resources can cope with.
The end result is often something akin to plain english (in terms of code), and while I&amp;rsquo;m not sure this says much for my cognition and memory, I do often wonder why this is not better syntax full stop?</description></item><item><title>Octogon G-Code File Uploader</title><link>https://slippytrumpet.io/2017/12/octogon-gcode-file-uploader/</link><pubDate>Tue, 05 Dec 2017 23:05:39 +0000</pubDate><guid>https://slippytrumpet.io/2017/12/octogon-gcode-file-uploader/</guid><description>An automatic file upload utility for OctoPrint Octogon is a simple command line utility which will monitor a single folder on your local file system for the addition/modification of .stl and .gcode extension files and automatically copy them to OctoPrint so they appear in your files list.
Why? My 3D Printer is right next to me at the moment. But getting files onto it, configuring it, and monitoring it, are jobs that are a bit painful in this wireless age.</description></item><item><title>3D Printing a Racing Drone</title><link>https://slippytrumpet.io/2017/11/3d-printed-drone-build/</link><pubDate>Thu, 30 Nov 2017 21:34:28 +0100</pubDate><guid>https://slippytrumpet.io/2017/11/3d-printed-drone-build/</guid><description>We wanted to build a racing drone on a 3D printed frame Pictured: Completed build
And I wanted to document it here - the build; the programming bit; the learning to fly bit..
But then we got into it. And I soon realised 3D printing the chassis/frame was actually going to be the easy bit.
Drones builds are a massive topic - when you&amp;rsquo;re starting out. Involved, time consuming, but hugely rewarding, is the best way I can sum it up.</description></item><item><title>Experiments with Messaging over Ethernet Frames</title><link>https://slippytrumpet.io/2017/07/experiments-with-message-queuing-over-ethernet-frames/</link><pubDate>Mon, 10 Jul 2017 17:27:33 +0100</pubDate><guid>https://slippytrumpet.io/2017/07/experiments-with-message-queuing-over-ethernet-frames/</guid><description>In his article, Network Protocol Breakdown: Ethernet and Go, Matt Layher describes the Ethernet protocol and introduces a couple of libraries written in Go. I read the article with interest. Application communication, at the Ethernet frame level, a lower level than TCP sockets, was something I&amp;rsquo;d never considered before.
Of particular interest was the &amp;ldquo;broadcast&amp;rdquo; nature of the communication. In contrast to sockets - though frames can also be addressed to specific devices - frames can be broadcast network-wide, enabling more than one device to listen and use the frame payload.</description></item><item><title>Running your Application as a Service on Pi Zero W</title><link>https://slippytrumpet.io/2017/06/running-your-app-as-service-on-pi-zero-w/</link><pubDate>Thu, 08 Jun 2017 10:27:15 +0100</pubDate><guid>https://slippytrumpet.io/2017/06/running-your-app-as-service-on-pi-zero-w/</guid><description>Daemonize your application so that it is easily started, stopped and resilient to crashes So you&amp;rsquo;ve got your headless Raspberry Pi Zero W all set up and you&amp;rsquo;ve been running applications you&amp;rsquo;ve written for yourself on it? I have, I&amp;rsquo;m using Go with a combination of Embd and Periph.io libraries to interact with the hardware on the Pi Zero W itself and external to it.
But it feels clunky.</description></item><item><title>3D Printing. Learnings shared</title><link>https://slippytrumpet.io/2017/05/3d-printing-learnings-shared/</link><pubDate>Thu, 18 May 2017 19:57:59 +0100</pubDate><guid>https://slippytrumpet.io/2017/05/3d-printing-learnings-shared/</guid><description>Pictured: Pump mount.
So&amp;hellip; I have a Prusa Original Mk2 3D Printer. Learnings specific to this machine, though I expect you could generalise much of this. 1) Prusa Original Mk2 is a great product. Mine was a kit. I built it over 4 evenings, and on the few occasions I&amp;rsquo;ve contacted support, they&amp;rsquo;ve been great.
2) You can spend thousands on a 3D printer. Don&amp;rsquo;t. Prusa is reasonable cost for its ability.</description></item><item><title>Web Bluetooth to MQTT Gateway with Puck.js</title><link>https://slippytrumpet.io/2017/04/webbluetooth-to-mqtt-gateway/</link><pubDate>Fri, 07 Apr 2017 12:36:46 +0100</pubDate><guid>https://slippytrumpet.io/2017/04/webbluetooth-to-mqtt-gateway/</guid><description>If you read A little bit of Web Bluetooth you&amp;rsquo;ll know a bit about Puck.js and the new Web Bluetooth API already. But what, aside from building a gimmicky two factor authentication system, can you do with it? I had some ideas.
What about an interface through which you can program multiple Pucks at the same time? The Web IDE allows you to connect and program one Puck at a time.</description></item><item><title>Raspberry Pi Zero W &#34;headless&#34; Setup</title><link>https://slippytrumpet.io/2017/03/raspberry-pi-zero-w-setup/</link><pubDate>Fri, 17 Mar 2017 16:06:50 +0000</pubDate><guid>https://slippytrumpet.io/2017/03/raspberry-pi-zero-w-setup/</guid><description>Pictured: My Raspberry Pi Zero W stand/rack. Get it on Thingiverse
An end-to-end log of the set-up process I followed from my Macbook What&amp;rsquo;s this all about? Setting up a Raspberry Pi Zero W in a &amp;ldquo;headless&amp;rdquo; configuration, without a keyboard or monitor; Configuring access to multiple Wifi access points; Securing via passwordless SSH public key only login and Firewall rules configuration; Simple command line Terminal access by configuring Hostname/Hosts; Creating a custom image, which we can reuse next time we want to configure another Pi Zero W.</description></item><item><title>A little bit of Web Bluetooth</title><link>https://slippytrumpet.io/2017/02/a-little-bit-of-web-bluetooth/</link><pubDate>Thu, 09 Feb 2017 15:08:26 +0100</pubDate><guid>https://slippytrumpet.io/2017/02/a-little-bit-of-web-bluetooth/</guid><description>Communicating using the Bluetooth protocol has traditionally been the sole preserve of native applications. Now you can do it from a web page! This is the first of two short posts on my experiments with Puck.js and Web Bluetooth. This one looks at security; the second will look at a Web Bluetooth to MQTT gateway experiment.
What&amp;rsquo;s Web Bluetooth? Some may know, that from Google Chrome v56, the Web Bluetooth API went from being an experimental &amp;ldquo;opt-in&amp;rdquo; feature to enabled by default.</description></item><item><title>Building a Remote Control Car with Espruino on ESP8266</title><link>https://slippytrumpet.io/2016/11/building-an-rc-car-with-espruino-on-esp8266/</link><pubDate>Wed, 16 Nov 2016 09:18:08 +0000</pubDate><guid>https://slippytrumpet.io/2016/11/building-an-rc-car-with-espruino-on-esp8266/</guid><description>A broken radio controlled microcar; just lying in a box, useless. A little knowledge of Espruino and winter nights closing in. &amp;ldquo;We can make this car work again - but over Wifi&amp;rdquo;, I told the kids. And that was my first mistake. First, one of those, &amp;ldquo;blimey this is a long post; maybe I won&amp;rsquo;t bother&amp;rdquo; things.. AKA &amp;ldquo;TL;DR&amp;rdquo;.
Espruino/JavaScript code which runs on a NodeMCU ESP8266 microcontroller and does this.</description></item><item><title>Let&#39;s Encrypt and Go</title><link>https://slippytrumpet.io/2016/10/letsencrypt-and-go/</link><pubDate>Mon, 31 Oct 2016 18:43:50 +0100</pubDate><guid>https://slippytrumpet.io/2016/10/letsencrypt-and-go/</guid><description>Recently I implemented TLS using Let&amp;rsquo;s Encrypt for two Go applications. I thought I&amp;rsquo;d outline the process I followed and mention a couple of issues I had. Let&amp;rsquo;s Encrypt is a fabulous service. In making TLS freely accessible to the masses it&amp;rsquo;s helping make the Internet a more secure place.
For Go applications, there&amp;rsquo;s no automatic install and renewal route, the process you follow to obtain a certificate takes you via the &amp;ldquo;standalone&amp;rdquo; option.</description></item><item><title>RethinkDB. The end of the Beginning, not the End.</title><link>https://slippytrumpet.io/2016/10/rethinkdb-the-end-of-the-beginning/</link><pubDate>Tue, 25 Oct 2016 15:08:26 +0100</pubDate><guid>https://slippytrumpet.io/2016/10/rethinkdb-the-end-of-the-beginning/</guid><description>Maybe you heard. The commercial entity behind RethinkDB will soon be no more. The project will hopefully continue as community driven open source, although the details are unclear - the who and how has yet to be ironed out.
From my first encounter with the database it was clear that RethinkDB had something going on. A performant document oriented database had to be a given, yes. But the glorious admin UI, effortless clustering, and intuitive ReQL query language were lovely to see and use; the extensive documentation and examples, great to fall back on.</description></item></channel></rss>
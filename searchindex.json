{"categories":[{"title":"3D Printing","uri":"https://slippytrumpet.io/categories/3d-printing/"},{"title":"blockchain","uri":"https://slippytrumpet.io/categories/blockchain/"},{"title":"ethereum","uri":"https://slippytrumpet.io/categories/ethereum/"},{"title":"iot","uri":"https://slippytrumpet.io/categories/iot/"},{"title":"linux","uri":"https://slippytrumpet.io/categories/linux/"},{"title":"opinion","uri":"https://slippytrumpet.io/categories/opinion/"},{"title":"programming","uri":"https://slippytrumpet.io/categories/programming/"},{"title":"Web Development","uri":"https://slippytrumpet.io/categories/web-development/"}],"posts":[{"content":" It is possible to make money on Cryptocurrencies, in an interesting but short window post ITO (Intial Token Offering). In this second of three installments we get to it! In part 1 we set the scene, and I left you with this teaser - the key to this is liquidity, or rather the lack of liquidity. It\u0026rsquo;s also about information, and we\u0026rsquo;ll get to that too.\nLet\u0026rsquo;s pick up it there. What do I mean by liquidity? Efficient markets are those where pretty much everything is known about the value of something, and it is factored in to the price.\nInefficient markets are not like this. Not all information is known so cannot be factored in.\nSo markets become efficient through perfect and timely information - and liquidity. When I say liquidity, I really mean transaction volume. More transactions, whether buy or sell, will mean the price you see something for sale at is likely its current worth in the market. It also means the price at which someone is prepared to buy something from you, is likely a fair price.\nLess efficient markets have less perfect information, which is not as timely, and lower liquidity - so fewer transactions.\nIt\u0026rsquo;s hard to beat an efficient market if you\u0026rsquo;re intent on profiting from it. In the world of share dealing you might have to resort to insider dealing, but that would make it inefficient (information that is not in the share price), so is quite rightly illegal.\nYou might try to beat the market by other means, using better hardware, software and networking to have legitimate information reach you, more quickly than it can reach the next person.\nThis is why good software and systems are so important in fields like stockbroking and sports betting, for example.\nImagine as a gambler, having better access to information on sporting event outcomes or in-play scenarios, than the next person, or the betting company. You\u0026rsquo;d have an advantage. Checkout \u0026ldquo;Sports Arbitrage\u0026rdquo; when you get a moment!\nBetting companies are in a technology race of sorts. Not just to be available to their customers more of the time, but to make sure they have information faster than their customers, and their competitors - or at least as fast.\nLong story short, if you can \u0026ldquo;know\u0026rdquo; faster, then the market becomes inefficient, Similarly where there\u0026rsquo;s low liquidity it\u0026rsquo;s difficult to form a view on what price should be. Demand and supply isn\u0026rsquo;t doing its bit.\nIt\u0026rsquo;s getting a bit dry this! I know, but stay with me.\nA good indicator of an efficient market is where the price you can buy something at is also the price a seller will buy from you. You see this as a bid/offer spread in finance with stocks and shares. Often there are reasons for the bid and offer prices to be different, for instance a dividend is due to be paid. However, often the bid price and offer price are not the same and this is the market maker, creating a differential in the two prices which will provide a margin for him (or her).\nOr, you could just be looking at an inefficient market, it will correct itself eventually, but for now either information or low liquidity means the price feels a bit \u0026ldquo;out-of-sorts\u0026rdquo;.\nQuick recap? We should. We\u0026rsquo;ve concluded that it is hard to make a profit in an efficient market.\nWe\u0026rsquo;ve already concluded it\u0026rsquo;s hard to trade crypto for profit, and it\u0026rsquo;s hard to make mining wipe it\u0026rsquo;s face (see part 1 of this blog post).\nSo, we need to be looking elsewhere, for an inefficient market instead. A market with not enough information or information that cannot be relied upon, or information which isn\u0026rsquo;t available fast enough (at least not to everyone), and with low liquidity.\nWhere could we find one of those\u0026hellip;. ;)\nI see what you did there! That\u0026rsquo;s why we need an ITO? Yes, you\u0026rsquo;ve got it, we need an ITO. But we need something else too - the ability to trade our tokens when the ITO launches.\nOtherwise, we\u0026rsquo;re impotent.\nWe\u0026rsquo;ll hold our tokens, we\u0026rsquo;ll listen to the project updates - the frequency of which tail off rapidly post ITO - and we\u0026rsquo;ll compare progress to the whitepaper, thinking WTF are they doing?\nAnd there\u0026rsquo;s nothing you can do if you can\u0026rsquo;t sell your tokens.\nWe might even make the observation that something about a particular picture - showing progress - doesn\u0026rsquo;t look right. Like it was photochopped, expertly. But if you can\u0026rsquo;t sell your tokens you\u0026rsquo;re still stuck as a pig.\nAnd here\u0026rsquo;s the thing. You can\u0026rsquo;t (easilly) sell your tokens.\nWhy not just go to an exchange? Sell them there? Great question, but we can\u0026rsquo;t. We don\u0026rsquo;t have coins to trade, we have tokens. It is possible to get a token listed on an exchange, but apparently its expensive. It doesn\u0026rsquo;t happen immediately post ITO, and it\u0026rsquo;s very likely it will never happen.\nPlus\u0026hellip;.we spoke about exchanges earlier, in the first post. They\u0026rsquo;re pretty efficient markets, with fees strapped on, and plenty of liquidity.\nThat\u0026rsquo;s not what we want is it? I thought we\u0026rsquo;d agreed on that bit? Even if we could sell on an exchange, where\u0026rsquo;s the opportunity?\n","id":0,"section":"posts","summary":"It is possible to make money on Cryptocurrencies, in an interesting but short window post ITO (Intial Token Offering). In this second of three installments we get to it! In part 1 we set the scene, and I left you with this teaser - the key to this is liquidity, or rather the lack of liquidity. It\u0026rsquo;s also about information, and we\u0026rsquo;ll get to that too.\nLet\u0026rsquo;s pick up it there.","tags":["cyrptocurrency","ico","ethereum","blockchain"],"title":"How to make money with Crypto via ITOs and tokens (Part 2) - Draft","uri":"https://slippytrumpet.io/2019/11/how-to-make-money-with-crypto-via-itos-and-tokens-part-2/","year":"2019"},{"content":"","id":1,"section":"posts","summary":"","tags":null,"title":"Posts","uri":"https://slippytrumpet.io/posts/","year":"2019"},{"content":" It is possible to make money on Cryptocurrencies, in an interesting but short window post ITO (Intial Token Offering). Trust me there\u0026rsquo;s more here than a clickbait title, but first we need to introduce our subject. When people think of Cryptocurrencies, if they know what they are, they think of Bitcoin first, and maybe the altcoins, of which there are many, such as Litecoin and Ethereum, to name just two.\nWhen people think of how to make money in cryptocurrency, they might think of speculation first - buy and hold, or buy and trade, or more complex stuff, like shorting.\nIf they\u0026rsquo;ve heard of blockchain, and know even the basics, they\u0026rsquo;ll be aware of mining, and how that \u0026ldquo;can\u0026rdquo; earn you rewards for contributing computing power to the network, essentially to validate and encode transactions into an immutable chain of blocks - think of blocks as ledgers for the transactions - hence the name \u0026ldquo;blockchain\u0026rdquo;.\nBoth work in theory and can make you money.\nIn practice you are competing against a pretty efficient market when trading cryptocurrencies, and the fees for doing so can be significant on centralised exchanges.\nAnd, as as we say in the regulated world of financial services, but are not obligated to mention here, as this is not regulated by the FCA \u0026ldquo;investments can go down as well as up and you are not guaranteed to get back the money you invested\u0026rdquo;.\nWe don\u0026rsquo;t need to say, but that doesn\u0026rsquo;t make it not true.\nMining isn\u0026rsquo;t a great bet either, even though in principle you are exposed to less risk, as you earn a set number of coins, and you\u0026rsquo;ve not had to pay for them.\nWhy? Depending on the currency you want to mine, you\u0026rsquo;ll need to invest in hardware which either brings a lot of CPU power to the table, or a lot of fast memory. The kit is an investment for certain.\nThen you need to factor in running costs. \u0026ldquo;Rigs\u0026rdquo; or miners as they get called, consume a lot of electricity, required both to perform the calculations, and also to keep the hardware cool enough. If someone has better hardware than you, they can compute faster, solving the puzzles first, and reap the rewards for mining the blocks. And if someone can operate at lower cost, consuming less electricity, they can be more profitable than you, allowing them to reinvest in better hardware again.\nThe mechanics aren\u0026rsquo;t unfamiliar in the normal business world. It\u0026rsquo;s a race: to be the most effective and; the most efficient.\nAs a side note, I\u0026rsquo;m mainly speaking of the \u0026ldquo;Proof of Work\u0026rdquo; model and many currencies are mined on this basis. It\u0026rsquo;s not really relevant to this discussion, but someone will call me out on it ;)\nSo what about ITOs? An ITO, or Intial Token Offering represents the sale of cryptotokens to the public. Think of an ITO as similar to an ICO (Intial Coin Offering), and as similar to an IPO (Intial Public Offering) which is the offer of company shares to the public.\nIn practice ICO and ITO get used interchangeably, though they are not quite the same. In one you get coins - new cryptocurrency - in the other you get tokens, something which is a product of what is known as a smart-contract.\nWe\u0026rsquo;ll park that for now though.\nIn an ITO you give fiat currency (real) or cryptocurrency in return for tokens, and you want these tokens for the purpose of obtaining future, greater value based on what the company is going to do with the currency invested.\nThe smart-contract defines what value should be attached to a token and in many cases when the value gets crystalized and shared per token - talk about bad parking!\nA token is like a share in so many regards - but it\u0026rsquo;s not a share, mainly for the purpose of staying under the radar as best as possible and avoiding regulation, as far as I can see.\nAnother side note: I\u0026rsquo;m not familiar with the current state of legisation on ITOs. They were very big news last year, and arguably contributed significantly to the bubble in cryptocurrencies, and the subsequent crash. But regulation evolves to match the animal that evolves. Well, in most cases it does.\nGoing back to risk. Many previous ITOs at best, turned out to have no legs and little actual substance beyond very impressive marketing, and in the worst case, they were vehicles for outright fraud.\nI suspect that hasn\u0026rsquo;t changed much today.\nFinal side note: Most of my experience relates to 2018 and early 2019 when I took a deep dive into all this crypto and blockchain stuff.\nSo how does this work then? If ITOs are no good to us - why mention them? That\u0026rsquo;s the thing you see, we do need an ITO, but hopefully not long enough to be burned though lack of project viabilty or being defrauded.\nI\u0026rsquo;m going to get into the nitty gritty tomorrow in Part 2 which will be the penultimate part.\nI\u0026rsquo;m not going to be stringing it out - I\u0026rsquo;ve got a job or lucrative contract to find, so can\u0026rsquo;t be writing on here, all day.\nYou want a teaser? \u0026ldquo;Liquidity\u0026rdquo; is a big part of it, or rather the lack of it.\nYou\u0026rsquo;re welcome to feed back or ask questions in the comments below, if you want to.\n","id":2,"section":"posts","summary":"It is possible to make money on Cryptocurrencies, in an interesting but short window post ITO (Intial Token Offering). Trust me there\u0026rsquo;s more here than a clickbait title, but first we need to introduce our subject. When people think of Cryptocurrencies, if they know what they are, they think of Bitcoin first, and maybe the altcoins, of which there are many, such as Litecoin and Ethereum, to name just two.","tags":["cyrptocurrency","ico","ethereum","blockchain"],"title":"How to make money with Crypto via ITOs and tokens (Part 1)","uri":"https://slippytrumpet.io/2019/11/how-to-make-money-with-crypto-via-itos-and-tokens-part-1/","year":"2019"},{"content":" A little Go package to make BadgerDB easier (for me) to work with I\u0026rsquo;ve noticed that as an \u0026ldquo;older\u0026rdquo; developer, often, one of the first things I\u0026rsquo;ll do with a new package/API I\u0026rsquo;m using, is abstract it into just the bits I need and/or that my cognitive resources can cope with.\nThe end result is often something akin to plain english (in terms of code), and while I\u0026rsquo;m not sure this says much for my cognition and memory, I do often wonder why this is not better syntax full stop?\nHere\u0026rsquo;s an example. This package, named Sett, abstracts the BadgerDB API, the focus simply on easy reuse of the BadgerDB methods that I\u0026rsquo;m likely to want to use most frequently.\nI\u0026rsquo;m not suggesting there\u0026rsquo;s anything wrong with the BadgerDB API, only that, for me, the syntax seems quite complex and is therefore not easy to recall. Hence me writing Sett which literally just hides the complicated code enabling me to be more productive with BadgerDB.\nTo give one example, below we retrieve the value of a single key from the data store and print it. First with the BadgerDB method, and then with Sett.\nGet with BadgerDB // BadgerDB var answer []byte err := db.View(func(txn *badger.Txn) error { item, err := txn.Get([]byte(\u0026quot;question\u0026quot;)) if err != nil { return err } answer, err := item.Value() if err != nil { return err } return nil }) if err != nil { log.Fatal(err) } fmt.Printf(\u0026quot;The answer is: %s\\n\u0026quot;, answer)  \nGet with Sett // Sett answer, err := db.Get(\u0026quot;question\u0026quot;) if err != nil { log.Fatal(err) } fmt.Printf(\u0026quot;The answer is: %s\\n\u0026quot;, answer)   Which version can you remember?\nI should however point out that in BadgerDB, db.View is a read transaction wrapper. So, while the above examples both include a single Get transaction, BadgerDB could accomodate more.\nWe could for example retrieve a second key in the same transaction, which would doubtless be more efficient than the two sequential db.View transactions, required to get two keys when using Sett.\nBut, realistically, how often will I want more than one key, selected by specific key? Should I find the need, a small modification to the Sett API could facilitate the return of multples keys in the one GET call.\n\u0026ldquo;Virtual\u0026rdquo; tables One feature of the Sett API that I find indispensible, is virtual tables.\nTables are effectively created by adding a prefix to the key which is stored in BadgerDB, hence virtual, since tables are not a feature of BadgerDB.\nWith an interface formalised through the Sett API, I\u0026rsquo;ve found it much easier to reason about the data I\u0026rsquo;m working with, by thinking in terms of tables.\nHere\u0026rsquo;s an example which shows how the use of these virtual tables allows key reuse.\ns.Table(\u0026quot;client\u0026quot;).Set(\u0026quot;1234\u0026quot;, \u0026quot;client data\u0026quot;) // real key is \u0026quot;client1234\u0026quot; s.Table(\u0026quot;client\u0026quot;).Get(\u0026quot;1234\u0026quot;) // returns \u0026quot;client data\u0026quot; s.Table(\u0026quot;supplier\u0026quot;).Set(\u0026quot;1234\u0026quot;, \u0026quot;supplier data\u0026quot;) // real key is \u0026quot;supplier1234\u0026quot; s.Table(\u0026quot;supplier\u0026quot;).Get(\u0026quot;1234\u0026quot;) // returns \u0026quot;supplier data\u0026quot;   Tables also allow us to implement other nice features such as Drop() which, as you might expect, deletes the virtual table or more accurately, all keys with the table prefix.\nUpdates BadgerDB also includes a db.Update transaction wrapper designed to wrap Set and Delete transactions, and it\u0026rsquo;s possible to write or delete multiple items by key.\nThis is definitely something I want to do efficiently via Sett, so I implemented batch updates - and the API is not dissimilar to the functionality that used to exist in BadgerDB itself!\nItems are added to the dataset to be stored using Batchup()`.\nLarge datasets are split into smaller batches of 500 (by default) and each batch of 500 is passed to a goroutine tasked with inserting those 500 keys. We can achieve very high write speed using concurrency and goroutines, though optimum batchsize will depend on size of the dataset and the performance of your hardware.\nSett splits the dataset into batches for you, in the background, no need to write your own goroutines.\nHere\u0026rsquo;s a very simple example which creates a batch of three keys/values, before submitting the batch to BadgerDB for insertion to the \u0026ldquo;client\u0026rdquo; table.\ns.Batchup(\u0026quot;hello\u0026quot;, \u0026quot;world\u0026quot;) s.Batchup(\u0026quot;hello-again\u0026quot;, \u0026quot;world\u0026quot;) s.Batchup(\u0026quot;goodbye\u0026quot;, \u0026quot;world\u0026quot;) s.Table(\u0026quot;client\u0026quot;).SetBatch()   There\u0026rsquo;s more to Sett, and the README on Github covers it.\nAnd there\u0026rsquo;s room to improve it. One area of concern is reporting and returning from goroutines which error, and this is something I\u0026rsquo;ll be looking into.\nIf you find Sett useful, let me know in the comments. If I\u0026rsquo;ve made any errors please also let me know. I\u0026rsquo;m always learning.\n","id":3,"section":"posts","summary":"A little Go package to make BadgerDB easier (for me) to work with I\u0026rsquo;ve noticed that as an \u0026ldquo;older\u0026rdquo; developer, often, one of the first things I\u0026rsquo;ll do with a new package/API I\u0026rsquo;m using, is abstract it into just the bits I need and/or that my cognitive resources can cope with.\nThe end result is often something akin to plain english (in terms of code), and while I\u0026rsquo;m not sure this says much for my cognition and memory, I do often wonder why this is not better syntax full stop?","tags":["golang","badgerdb"],"title":"Sett, a BadgerDB abstraction","uri":"https://slippytrumpet.io/2018/05/sett-a-badgerdb-abstraction/","year":"2018"},{"content":" An automatic file upload utility for OctoPrint Octogon is a simple command line utility which will monitor a single folder on your local file system for the addition/modification of .stl and .gcode extension files and automatically copy them to OctoPrint so they appear in your files list.\nWhy? My 3D Printer is right next to me at the moment. But getting files onto it, configuring it, and monitoring it, are jobs that are a bit painful in this wireless age. Everything is done via the LCD control panel and SD card.\nSo when I found out about OctoPrint, a print server for 3D Printers which runs on a Raspberry Pi, I did it. I bought a Raspberry Pi and installed OctoPi, the prebuilt Raspberry Pi image which includes OctoPrint as well as some other utilities.\nOctoPrint has been a relevation. It offers remote monitoring and control of the 3D printer over LAN - and WAN so long as you configure your router\u0026rsquo;s firewall correctly - so you can view, monitor, tweak and pause/stop a print job, over a wifi connection.\nOctogon is a simple utility written in Go. It addresses one tiny weakspot in my OctoPrint setup and workflow: the need to physically upload my G-code files via OctoPrint\u0026rsquo;s web interface. Using Octogon, they just appear in the file list and are available for printing.\nWith Octogon running. A single folder on my computer is monitored. Any new or modified .gcodeand .stl files saved into that folder are copied over to OctoPrint automatically using SSH. Save a file locally, and it\u0026rsquo;s almost immediately available on the Raspberry Pi.\nUsing it is simple. In most cases the only command line option needed to run the program is the password -p flag.\nFor example, you can start Octogon monitoring the current folder like this:\n$ octogon -p sshpasswordtoraspberrypi  \nDownload Octogon You can checkout the documentation and source code, as well as download compiled binaries for Linux and Mac, here.\nUnfortunately the Windows build currently doesn\u0026rsquo;t work - the file monitoring is not reliable - and I\u0026rsquo;ll look into this in the near future.\n","id":4,"section":"posts","summary":"An automatic file upload utility for OctoPrint Octogon is a simple command line utility which will monitor a single folder on your local file system for the addition/modification of .stl and .gcode extension files and automatically copy them to OctoPrint so they appear in your files list.\nWhy? My 3D Printer is right next to me at the moment. But getting files onto it, configuring it, and monitoring it, are jobs that are a bit painful in this wireless age.","tags":["raspberry pi","golang","gcode","3dprinting","octoprint"],"title":"Octogon G-Code File Uploader","uri":"https://slippytrumpet.io/2017/12/octogon-gcode-file-uploader/","year":"2017"},{"content":" We wanted to build a racing drone on a 3D printed frame  Pictured: Completed build \nAnd I wanted to document it here - the build; the programming bit; the learning to fly bit..\nBut then we got into it. And I soon realised 3D printing the chassis/frame was actually going to be the easy bit.\nDrones builds are a massive topic - when you\u0026rsquo;re starting out. Involved, time consuming, but hugely rewarding, is the best way I can sum it up.\nTo document the build process and programming process would be a massive undertaking, and there\u0026rsquo;s plenty of info on the Internet already.\nSo, all we have in this post is a single video and a couple of images. The video shows off our completed drone in flight!\n    This image is the Peon 230 frame we printed for the frame. You can get it on Thingiverse.\n \n3D printing the frame has one major benefit - you break a part you can just print another. Even with fairly high infills we\u0026rsquo;ve broken every piece but three of the arms while learning to fly it - the worst damage when I hit a tree - and whilst it takes a bit of time to reprint the parts, it\u0026rsquo;s better than buying new frames!\nWhat you need Most of the parts we sourced via Ebay, and in most cases the prices of items direct from Asia were too attractive to ignore. However, one downside is that lead times for delivery are quite lengthy. In some cases our build was held up by 3 weeks waiting for a particular part.\nYou\u0026rsquo;ll find some variations on this parts list as some components can be sourced that perform more than one role, but this is what we used.\n Overlander 3S 1600mAh 35\u0026frasl;65 battery - under £15.00 Radient Reflex 2-3S Charger - under £15.00 4 BlHeli-S Speed controllers (ESC) - £9.00 each 4 Emax 2206 1900 kv motord - under £7.00 each Matex PDB-XT60 Power Distribution Board - £3.19 Naze32 Acro Revision 6 Flight Controller - £8.55 LED lights (4 strips) - £2.39 10 pack of 40 mm blue annodised standoffs - £3.71 Tarot TL150F3 S.BUS 8 Channel Receiver - £6.39 Bulk pack Screws/Nuts - under £3.00 5 pack Eachine Battery Tie Down Straps - £2.35 Heat Shrink (various) - under £4.00  Summary This post isn\u0026rsquo;t the detailed one I\u0026rsquo;d planned, I simply don\u0026rsquo;t have the time to do the subject proper justice. But feel free ask me stuff - if I can help I will.\n","id":5,"section":"posts","summary":"We wanted to build a racing drone on a 3D printed frame  Pictured: Completed build \nAnd I wanted to document it here - the build; the programming bit; the learning to fly bit..\nBut then we got into it. And I soon realised 3D printing the chassis/frame was actually going to be the easy bit.\nDrones builds are a massive topic - when you\u0026rsquo;re starting out. Involved, time consuming, but hugely rewarding, is the best way I can sum it up.","tags":["drones","remote control","multirotor","quadcopter","3Dprinting"],"title":"3D Printing a Racing Drone","uri":"https://slippytrumpet.io/2017/11/3d-printed-drone-build/","year":"2017"},{"content":" In his article, Network Protocol Breakdown: Ethernet and Go, Matt Layher describes the Ethernet protocol and introduces a couple of libraries written in Go. I read the article with interest. Application communication, at the Ethernet frame level, a lower level than TCP sockets, was something I\u0026rsquo;d never considered before.\nOf particular interest was the \u0026ldquo;broadcast\u0026rdquo; nature of the communication. In contrast to sockets - though frames can also be addressed to specific devices - frames can be broadcast network-wide, enabling more than one device to listen and use the frame payload.\nI could see some parallels between Ethernet frames and MQTT, a protocol I use frequently in my hardware projects.\nI could also see a few distinct advantages over MQTT. I don\u0026rsquo;t want to go into loads of detail here, but, suffice to say, a cheap, convenient but very insecure approach to using MQTT in what are often just \u0026ldquo;hobby\u0026rdquo; hardware projects, is to bounce traffic off of one of the free remote MQTT brokers. And I have been known to do this ;)\nSo why Ethernet Frames? Potentially, by using Ethernet frames there would be no requirement for the MQTT broker so that\u0026rsquo;s one less piece of hardware to configure and manage (if you host your own); messages would stay within the local area network, behind the router firewall, so we\u0026rsquo;re secure by default and; we might achieve higher-speed transmissions, since we would not be sending data all the way off to a remote MQTT broker, only to receive it back from that broker on another machine sitting within the same local area network.\nSo I set about writing a package on top of Matt\u0026rsquo;s Ethernet and Raw packages with two objectives in mind:-\n Use Ethernet frame messaging to emulate MQTT specifically by providing pub/sub functionality, and; Provide an API which would feel familiar to MQTT users and therefore be a relatively simple drop in replacement for a typical MQTT client library.  Methodology The package itself is fairly straightforward - most of the sophisticated stuff is performed by the two packages of Matt\u0026rsquo;s which it imports, but it satisfies both of the objectives mentioned above.\nI took the liberty of naming the package EFMQ (for Ethernet Frames Message Queue), and you can find it here.\nObjective 1 - Provide Pub/Sub functionality Pub/Sub is emulated by devices maintaining a list of their own subscriptions and comparing each received message\u0026rsquo;s topic to this list. If topic matches a subscription, the message is put on an unbuffered channel for subsequent processing. Any messages that do not match a subscription are simply discarded.\nObjective 2 - Provide an API similar to MQTT This is best illustrated by a couple of examples.\nPublisher In this contrived example, we\u0026rsquo;re publishing temperature data on the temp topic every second. wlan0 represents the network interface used by the device, in this case a Raspberry Pi Zero W.\nmq, err := efmq.NewEFMQ(\u0026quot;wlan0\u0026quot;) if err != nil { log.Fatal(err) } t := time.NewTicker(1 * time.Second) for range t.C { if err := mq.Publish(\u0026quot;temp\u0026quot;, \u0026quot;20.5\u0026quot;); err != nil { log.Fatalln(err) } }  \nSubscriber In this example another device in the same network subscribes to the temp topic and then listens indefinitely. Any messages which match the subscription are made available on the mq.Message channel.\nmq, err := efmq.NewEFMQ(\u0026quot;wlan0\u0026quot;) if err != nil { log.Fatal(err) } mq.Subscribe(\u0026quot;fermenter\u0026quot;) mq.Listen() for msg := range mq.Message { fmt.Println(\u0026quot;topic:\u0026quot;, msg.Topic) fmt.Println(\u0026quot;message:\u0026quot;, msg.Payload) }  \nPerformance We\u0026rsquo;re off to a good start by removing the latency transmitting messages via a remote server, and the messaging is direct between two devices, no third device (a local MQTT broker) is needed to relay messages, but as yet I don\u0026rsquo;t have any benchmarks.\nIn testing, I\u0026rsquo;ve been running a dummy setup using two Raspberry Pi Zero W devices which have been communicating using EFMQ at an interval of 50ms for over a week with no issues. 50ms means 20 messages per second - more than sufficient for most monitoring and control applications that I\u0026rsquo;m likely to want to build!\nIf you give EFMQ a try please let me know how it works for you!\n","id":6,"section":"posts","summary":"In his article, Network Protocol Breakdown: Ethernet and Go, Matt Layher describes the Ethernet protocol and introduces a couple of libraries written in Go. I read the article with interest. Application communication, at the Ethernet frame level, a lower level than TCP sockets, was something I\u0026rsquo;d never considered before.\nOf particular interest was the \u0026ldquo;broadcast\u0026rdquo; nature of the communication. In contrast to sockets - though frames can also be addressed to specific devices - frames can be broadcast network-wide, enabling more than one device to listen and use the frame payload.","tags":["iot","mqtt","efmq","golang","raspberrypi","lan","ethernet"],"title":"Experiments with Messaging over Ethernet Frames","uri":"https://slippytrumpet.io/2017/07/experiments-with-message-queuing-over-ethernet-frames/","year":"2017"},{"content":" Daemonize your application so that it is easily started, stopped and resilient to crashes So you\u0026rsquo;ve got your headless Raspberry Pi Zero W all set up and you\u0026rsquo;ve been running applications you\u0026rsquo;ve written for yourself on it? I have, I\u0026rsquo;m using Go with a combination of Embd and Periph.io libraries to interact with the hardware on the Pi Zero W itself and external to it.\nBut it feels clunky.\nRunning \u0026ldquo;headless\u0026rdquo;, with no screen or keyboard, everytime I boot the device I need to SSH to it and kick off the application from the command line.\nOne of the apps I have monitors temperature using Onewire and two DS18B20 temperature probes. To have to SSH to the Pi Zero W to run the program that does this, is inconvenient: I need access to a computer with a Terminal, and the Pi Zero W must be accessible over the network via SSH. This won\u0026rsquo;t always be possible.\nMuch better would be for me to simply switch on the Pi Zero W and have the program run automatically. Plug and Play.\nWe can do this, and more, by running the program as a service, often referred to as \u0026ldquo;daemonizing\u0026rdquo;.\nHow to daemonize? There are Go packages that you can include in your codebase to emulate running as a service, and whilst I looked into these, this post does not cover them, for there is a simpler way, one which is useful for a program written in any language, not just Go.\nsystemd systemd is a service manager for Linux which ships with Raspbian, so it\u0026rsquo;s already installed on your Pi Zero W and allows us to easilly daemonize our application.\nRunning the application as a service has several benefits.\n1) We can start, stop and ascertain the status of our application service with simple commands.\n2) systemd will monitor and restart the service in the event our program crashes, so our application is more robust to unforseen errors and bugs.\n3) systemd will start the application for us once our Raspberry Pi W has booted - subject to a few constraints - so we\u0026rsquo;ll no longer need to SSH to the device to kickstart the program.\nCertainly sounds like the way to go!\nStep 1 - Create a systemd configuration file for your program systemd needs to know a few things about your application, so you need to give it a configuration file which provides the information required.\nConfiguration files have the .service extension and are stored in this location on your Pi Zero W /etc/systemd/system/\nChange directory to /etc/systemd/system and use sudo nano to create a new file, with the .service extension. For example I have tempmon.service.\nIn this file you need to add a few directives. This is my tempmon.service file, simply amend to suit your application.\n## tempmon.service [Unit] Description=Temperature Monitor After=network.target [Service] User=root WorkingDirectory=/home/slippytrumpet ExecStart=/home/slippytrumpet/tempmon Restart=on-failure StartLimitIntervalSec=1800 [Install] WantedBy=multi-user.target   The directives, for the most part, need no explanation, but a couple bear comment.\nAfter=network.target, means systemd will run the program once networking is available.\nUser=root, sets the user that the process is to be run as. Since my temperature monitoring application is interfacing with hardware on the Pi Zero W, it needs root privileges.\nStartLimitIntervalSec=1800, by default the application will be restarted if it crashes, but if it crashes more than the default of 5 times, there will be a pause of 1800 seconds (30 minutes) before systemd attempts to start it again.\nThe MAN file for systemd contains all the directives which can be used and you can find an online version of that, here.\nStep 2 - Enable the config file To enable your new config file, so that systemd daemonizes your program, use this command (substituting the name of your file in place of tempmon):\nsudo systemctl enable tempmon   If you edit the file once enabled you will need to reload it with this command:\nsudo systemctl daemon-reload   Now if you reboot your Pi Zero W, your program will be started by systemd. You can check it\u0026rsquo;s status with the command:\nsudo service tempmon status   And, you can stop and start the program just like any other Linux service:\nsudo service tempmon stop sudo service tempmon start  ","id":7,"section":"posts","summary":"Daemonize your application so that it is easily started, stopped and resilient to crashes So you\u0026rsquo;ve got your headless Raspberry Pi Zero W all set up and you\u0026rsquo;ve been running applications you\u0026rsquo;ve written for yourself on it? I have, I\u0026rsquo;m using Go with a combination of Embd and Periph.io libraries to interact with the hardware on the Pi Zero W itself and external to it.\nBut it feels clunky.","tags":["raspberry","pi-zero-w","golang","daemon","systemd","linux"],"title":"Running your Application as a Service on Pi Zero W","uri":"https://slippytrumpet.io/2017/06/running-your-app-as-service-on-pi-zero-w/","year":"2017"},{"content":"  Pictured: Pump mount. \nSo\u0026hellip; I have a Prusa Original Mk2 3D Printer. Learnings specific to this machine, though I expect you could generalise much of this. 1) Prusa Original Mk2 is a great product. Mine was a kit. I built it over 4 evenings, and on the few occasions I\u0026rsquo;ve contacted support, they\u0026rsquo;ve been great.\n2) You can spend thousands on a 3D printer. Don\u0026rsquo;t. Prusa is reasonable cost for its ability. That\u0026rsquo;s borne out by the waiting list I guess.\n Pictured: SD card holder \n3) Filament can kill you. Buy cheap and it\u0026rsquo;s going to smart a bit. Your prints won\u0026rsquo;t stick, or will fail at some point. Your interested children will disappear fast. Turns out, there\u0026rsquo;s no glory in 3D Printer configuration management.\n4) Prusa filament is great. It\u0026rsquo;s not expensive at all, until you factor in the carriage costs. Shame. They packed a very high quality PLA filament (IMO) with each printer/printer kit - you just can\u0026rsquo;t justify buying more, unless you can order in size :(\n5) Cheap filament will dement you. It will drip from the extruder, it will form \u0026ldquo;elephants foot\u0026rdquo; and any successful prints will be brittle. You\u0026rsquo;ll need more infill to get the same model strength. In fact, I wonder if it\u0026rsquo;s actually cheaper at all when all said and done.\n Pictured: Magsafe cable protection \n6) Heated beds are great. I get extra adhesion. But often not enough. More than a few times I\u0026rsquo;ve used the Pritstick - just to be sure.\n7) Firmware. Sometimes I think, \u0026ldquo;Why Prusa Original Mk2? Why you do that?\u0026rdquo;. There\u0026rsquo;s a large scratch in the Heat Bed of mine, which happened during calibration - for some reason - when the extruder head decided to submarine into it.\n8) Often multi-part models are best printed in separate jobs. This way if one part unsticks from the bed and takes up residence on the extruder head, it doesn\u0026rsquo;t get dragged through the other components, which until this point were printing perfectly well.\n9) Cheap filament. Spare yourself. It\u0026rsquo;s your ticket to a numb night toggling printer settings, hoping for better.\n10) Ambient temperature is a factor. Cold rooms will amplify issues. I\u0026rsquo;m on a run of good quality prints at the moment, but have to acknowledge ambient temp works in my favour as we head into UK Summer. Noted that I had a slew of fails through winter\u0026hellip; Similar models TBF.\n11) Mitigation. For me.. set the bed temperature at 60c, put a 215c first layer down at 0.15mm, and then revert to 205c therafter - whatever the model resolution. Shotgun approach or your new personal mantra..?\n12) Software. Good software will accelerate your path to making things you\u0026rsquo;ve designed yourself, rather than just printing off-the-shelf models others have made. I\u0026rsquo;ve tried a few applications, and I\u0026rsquo;ve settled on Fusion 360. It\u0026rsquo;s free for personal use, has a relatively shallow learning curve, and is intuitive to use.\n13) Print stuff. It\u0026rsquo;s often not plain sailing, and were it we\u0026rsquo;d learn nothing. I\u0026rsquo;ll wager, regardless of how much you spend on the machine itself, there\u0026rsquo;ll be some trial and error required.\nThis is me on thingiverse. Learning as I go. Show me yours.\n Pictured: Fidget Spinner \n","id":8,"section":"posts","summary":"Pictured: Pump mount. \nSo\u0026hellip; I have a Prusa Original Mk2 3D Printer. Learnings specific to this machine, though I expect you could generalise much of this. 1) Prusa Original Mk2 is a great product. Mine was a kit. I built it over 4 evenings, and on the few occasions I\u0026rsquo;ve contacted support, they\u0026rsquo;ve been great.\n2) You can spend thousands on a 3D printer. Don\u0026rsquo;t. Prusa is reasonable cost for its ability.","tags":["3Dprinting","prusa-original","mk2"],"title":"3D Printing. Learnings shared","uri":"https://slippytrumpet.io/2017/05/3d-printing-learnings-shared/","year":"2017"},{"content":" If you read A little bit of Web Bluetooth you\u0026rsquo;ll know a bit about Puck.js and the new Web Bluetooth API already. But what, aside from building a gimmicky two factor authentication system, can you do with it? I had some ideas.\nWhat about an interface through which you can program multiple Pucks at the same time? The Web IDE allows you to connect and program one Puck at a time. What if I want a few doing the same thing, it would be nice to set them up in one go? We\u0026rsquo;ll call this a Console.\nWhat about a Relay - whereby one Puck controls others in a master/slave configuration? Now you can do this directly between Pucks, but we could use Web Bluetooth to make a Relay.\nWhat about individual Pucks, communicating via Web Bluetooth, with each other over the Internet using MQTT, or just controlled from a remote location with MQTT? A Gateway?\nThree interesting ideas: a Console, a Relay and a Gateway.\nSo here is WebbleMQ, which is all of these things. It\u0026rsquo;s a HTML5 \u0026amp; Javascript application which allows you connect multiple Pucks.\nEach Puck is tracked on a connection ID, and depending on the mode that is set, it lets you interact with the connected Pucks in different ways.\n Pictured. The WebbleMQ interface \nThough I wrote it specifically for Puck.js, the Web Bluetooth API connection filter is quite broad. It looks for devices which, like the Puck, support the NORDIC UART bluetooth service. So it could well work for other devices which support this service. I haven\u0026rsquo;t tested.\nThe source code for the application, as well as being readable in the web page, can also be found on Github here.\nRelay mode One device, operating as Master, can control several devices which are configured as Slaves.\nFor example, it\u0026rsquo;s simple to turn the Pucks\u0026rsquo; onboard LEDs on and off with a program running on master device such as this:\nvar prog1 = \u0026quot;LED1.set();LED2.set();LED3.set();\\n\u0026quot;; var prog2 = \u0026quot;LED1.reset();LED2.reset();LED3.reset();\\n\u0026quot;; var on = false; setInterval(function(){ var prog = prog2; if(!on){prog = prog1;} Bluetooth.write(prog); on = !on; }, 5000);  \nConsole mode In Console mode, all devices listen to input from the console. We can programatically control several devices at once, we just key our commands to the console window and the code is passed to, and executed on, all connected Pucks.\nMQTT modes. The fun stuff We\u0026rsquo;ve two modes available here, \u0026ldquo;Announced\u0026rdquo; and \u0026ldquo;Unannounced\u0026rdquo;. I\u0026rsquo;ll explain the difference, but to be clear, neither mode is secure.\nThe MQTT broker used by default is the public iot.eclipse.org broker and though the topic ids used for publishing on are quite obscure in their format, e.g. /wmq/pub/t7fldnrthv205btnafjzg, this is not secure. If someone knows or guesses the topic id, they can listen and send on the same topic too. Don\u0026rsquo;t send your bank details :)\nThat said, if you need security, you could fork the application and change the MQTT broker to one which provides authentication. I didn\u0026rsquo;t need.\nMQTT \u0026ldquo;unannounced\u0026rdquo; In this mode each device has its own publish topic and subscribe topic. If you connect multiple Pucks, then Pucks can subscribe to another Puck\u0026rsquo;s publish topic, so they\u0026rsquo;d in effect be listening to it.\nMQTT \u0026ldquo;announced\u0026rdquo; Same as above, but device advertises its presence, both the topic it is publishing on and subscribed to, every 10 seconds on a third topic: /wmq/playing.\nThis topic is used by all connected devices in MQTT announced mode. So, in announced mode someone could check this topic and find pucks they could control, those users happy to allow their Puck to be controlled remotely over MQTT.\nThat\u0026rsquo;s it The appilication is not without a few glitches, it was a weekends work, and primarilly a proof of concept to help me get familiar with Web Bluetooth.\nIt could be improved. For example a free text box rather than select for MQTT topic would allow subscriptions to Pucks found publishing in wmq/playing. Better yet a check of the wmq/playing topic which adds all available devices to the publish and subscribe select box options. Feel free to fork it and send pull requests.\nIt\u0026rsquo;s not especially practical either. You have to have a computer running a Chrome Browser in order to let your Pucks communicate over MQTT. A proper gateway would be a server application on a Raspeberry Pi for example.\nBut it is, hopefully, a bit of fun, which other Puck owners might want to experiment with, and which shows off the potential of Web Bluetooth a little more.\nEnjoy!\n","id":9,"section":"posts","summary":"If you read A little bit of Web Bluetooth you\u0026rsquo;ll know a bit about Puck.js and the new Web Bluetooth API already. But what, aside from building a gimmicky two factor authentication system, can you do with it? I had some ideas.\nWhat about an interface through which you can program multiple Pucks at the same time? The Web IDE allows you to connect and program one Puck at a time.","tags":["javscript","iot","puckjs","webbluetooth","mqtt"],"title":"Web Bluetooth to MQTT Gateway with Puck.js","uri":"https://slippytrumpet.io/2017/04/webbluetooth-to-mqtt-gateway/","year":"2017"},{"content":"  Pictured: My Raspberry Pi Zero W stand/rack. Get it on Thingiverse \nAn end-to-end log of the set-up process I followed from my Macbook What\u0026rsquo;s this all about?  Setting up a Raspberry Pi Zero W in a \u0026ldquo;headless\u0026rdquo; configuration, without a keyboard or monitor; Configuring access to multiple Wifi access points; Securing via passwordless SSH public key only login and Firewall rules configuration; Simple command line Terminal access by configuring Hostname/Hosts; Creating a custom image, which we can reuse next time we want to configure another Pi Zero W.  To use the information here, you will need a Micro SD card, a full size adapter and an SD card USB drive, and of course, a Rasberry Pi Zero W.\nWhy Raspberry Pi Zero W? Raspberry Pi Zero W is a small, powerful and connected (onboard Wifi and Bluetooth) computer. It\u0026rsquo;s the only Raspberry Pi that\u0026rsquo;s really caught my attention, including the original \u0026lsquo;unconnected\u0026rsquo; Pi Zero.\nIt\u0026rsquo;s small; not much bigger than a NodeMCU ESP8266 Wifi board, but the Pi Zero W also offers Bluetooth as well as better processor, RAM and storage resources.\nIt\u0026rsquo;s cheap; just launched but only 9GBP. It will give ESP32 something to think on, a board which also has Wifi and Bluetooth, but to buy in a developer friendly form, \u0026lsquo;currently\u0026rsquo; costs a bit more.\nIt\u0026rsquo;s available; in the week it launched I ordered one, and I had it in my hands 2 days later. This makes it a strong contender in the space C.H.I.P has positioned for itself, which, though arguably a better board with 4GB of onboard storage, is in very short supply.\nIt runs Linux; so, much of the stuff I do day-to-day is portable to the Pi Zero W.\nIt runs Go; Go compiles for lots of platforms, but STM32 architectures are not supported - the binaries are too big. So I can\u0026rsquo;t use Go on ESP8266 boards, and I have no clue about programming in C. Fortunately for me, Go cross compiles to the Pi Zero W ARM architecture, just fine.\nGoing \u0026ldquo;headless\u0026rdquo; I\u0026rsquo;m shooting for a \u0026ldquo;headless\u0026rdquo; setup. No screen and no monitor or other peripherals. I want to access my Pi Zero W like I do servers - over SSH.\nYou can connect a monitor and keyboard initially to configure everything, but since I don\u0026rsquo;t have either spare, I\u0026rsquo;m doing it without.\nI\u0026rsquo;m on a Mac, so this log is Mac focussed. It would be easier on Linux - as you\u0026rsquo;ll see :)\nWe shoud start! What follows is my set-up process, end to end. You should be able to follow it verbatim.\nI didn\u0026rsquo;t know some of this information initially, I used a couple of web resources myself in piecing it together. I\u0026rsquo;ve provided links to these resources where relevant.\nStep 1. Download Raspbian Linux image and make a bootable Micro SD card We need a blank Micro SD card and adapter. And 8GB card seems to be the minimum requirement.\nFor a headless configuration we don\u0026rsquo;t need the Pixel GUI/desktop that bundles with the full image, so we can grab the smaller \u0026lsquo;lite\u0026rsquo; image. At time of writing latest was \u0026lsquo;Jessie\u0026rsquo;.\nDownload it here\nRun this command in Terminal, prefix with sudo if you need to:\ndiskutil list   Note the lines in the output like these:\n/dev/disk0 (internal, physical): /dev/disk1 (internal, virtual):   Plug the Micro SD card into the adapter and insert it into your SD card slot. Run the same command again. You should see an additional line in the output:\n/dev/disk0 (internal, physical): /dev/disk1 (internal, virtual): /dev/disk2 (internal, physical):   The additional line is your Micro SD card.\nNext, we\u0026rsquo;ll unmount it, ready for flashing.\nsudo diskutil unmountdisk /dev/disk2   In Terminal, change directory to where you have the downloaded Raspbian Jessie Lite image, which for me was Downloads:\ncd ~/Downloads   Use the dd command to copy the image to the Micro SD card. Note our use of rdisk2 rather than disk2. This means \u0026lsquo;raw disk\u0026rsquo; and is supposed to be faster.\nsudo dd bs=1m if=2017-03-02-raspbian-jessie-lite.img of=/dev/rdisk2   You\u0026rsquo;ll loose your Terminal prompt. Wait for the process to complete.\nWe now have a bootable Micro SD card.\nWe could stick it in the Pi Zero W and boot it right away, but this wouldn\u0026rsquo;t do us much good. With no keyboard or monitor, nor any network connectivity we can\u0026rsquo;t interact with it yet.\nEDIT: 05/12/2017. There are a couple of useful comments at the bottom of this post which suggest the process I describe next, including the need to create a virtual machine later on, can be simplified in general, and especially for Mac users on later versions of OS X. I haven\u0026rsquo;t had the opportunity to try for myself, but I\u0026rsquo;d encourage you to check that information out also.\nStep 2. Access the Raspbian Linux image to edit files The Raspbian image comprises two sub-partitions; a boot partition which is formatted as FAT32 and the file system partition, of type LINUX.\nIf we mount and inspect the SD card in our Mac\u0026rsquo;s Finder, we can only access the BOOT sub-partition. The LINUX filesystem partition is EXT4 format and our Mac Finder can\u0026rsquo;t see/use it.\nWe can\u0026rsquo;t mount the sub-partition in Terminal either on Mac, so we need to use Linux.\nA virtual machine is convenient here.\nOn Mac, an easy way to create a Linux virtual machine is via Vagrant and VirtualBox, and I mostly used this guide, by Jeff Geerling for this part of the process.\nInstall Vagrant, which will install the VirtualBox dependency.\nGrab a recent Ubuntu Linux image using vagrant init and start the virtual machine.\nvagrant init bento/ubuntu-16.04 vagrant up   Suspend it.\nvagrant suspend   Launch VirtualBox, find the virtual machine and discard the saved state (via the right click option). We need to do this so that we can enable USB.\nRight click again and select \u0026lsquo;Settings\u0026rsquo;. Choose \u0026lsquo;Ports\u0026rsquo; and \u0026lsquo;USB\u0026rsquo; then check \u0026lsquo;Enable USB Controller\u0026rsquo;.\nPlug the USB SD flash drive into one of the USB ports. Insert the Micro SD card (with the adapter if required) into the USB SD flash drive.\nCheck in Mac Finder that the card has not been mounted. If it has, unmount it.\nStart the virtual machine from within VirtualBox and login as the vagrant user:\nvagrant login: vagrant Password: vagrant   Click the USB option in the virtual machine window and select the USB Mass Storage device, which represents the USB SD flash drive/Micro SD card to give the virtual machine access to this drive.\nIf it is not selectable, double check in Finder that it has not been mounted.\nKey the following in the virtual machine\u0026rsquo;s Terminal prompt.\nsudo fdisk -l   This should identify both sub-partitions on the Micro SD card.\nDevice Type /dev/sdb1 Win95 FAT32 (LBA) /dev/sdb2 Linux   Mount the Linux sub-partition and change into this directory.\nsudo mount /dev/sdb2 /media/usb cd /media/usb   We now have access and can edit files.\nStep 3. Edit files to pre-configure Wifi The next step is to configure Wifi, so that when booted our Pi Zero W will connect to a network.\nI typically operate between two Wifi access points, so I have set up both in the configuration below.\nMaybe you only need to connect to one access point? I\u0026rsquo;d still recommend the configuration below, since it\u0026rsquo;s extensible - there if/when you need it.\nsudo nano etc/wpa_supplicant/wpa_supplicant.conf ## Note no preceding \u0026quot;/\u0026quot;. ## Want to edit file on image not the virtual machine   I\u0026rsquo;m working between two access points so configured wpa_supplicant.conf like this.\ncountry=GB ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network={ ssid=\u0026quot;SSID_OF_NETWORK_1\u0026quot; psk=\u0026quot;password\u0026quot; id_str=\u0026quot;home\u0026quot; } network={ ssid=\u0026quot;SSID_OF_NETWORK_2\u0026quot; psk=\u0026quot;password\u0026quot; id_str=\u0026quot;work\u0026quot; }   Key Ctrl+x to confirm and save.\nWe need to make amendments to etc/network/interfaces also.\nsudo nano etc/network/interfaces   The defaults in here need to be amended for multiple access points and roaming between them.\nAgain this is my configuration, but a redundant config for a second unused access point should not hurt you - and you may need it later.\nsource-directory /etc/network/interfaces.d auto lo iface lo inet loopback iface eth0 inet manual allow-hotplug wlan0 iface wlan0 inet manual wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf allow-hotplug wlan1 iface wlan1 inet manual wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf iface home inet dhcp iface work inet dhcp   Save the file.\nUnmount the Micro SD card in the SD card flash drive.\ncd ../../ sudo umount /media/usb   Next, we need to make a single amend to the first boot partition of the Micro SD card, since by default the SSH service is not enabled on Pi Zero.\nSo we\u0026rsquo;ll create an empty file named SSH with no extension. This is deleted at first boot, but SSH is subsequently enabled.\nsudo mount /dev/sdb1 /media/usb cd /media/usb sudo touch SSH cd ../../ sudo umount /media/usb   Insert the Micro SD card into your Pi Zero W and power it up. If all went well you\u0026rsquo;ll connect to an access point. If you configured a second access point, when you go to your second location you\u0026rsquo;ll automatically connect to that access point too.\nHopefully, it should be evident how to add a third access point (or more) if needed.\nStep 4. Configure passwordless login over SSH Now we have networking we can connect to the Pi Zero W itself over SSH.\nYou can find the IP address of the Pi Zero W by logging into your router and looking at the list of attached devices.\nAlternatively, many routers with DHCP allocate an IP and expose the Pi Zero on the hostname raspberrypi.local\nIn Terminal, let\u0026rsquo;s try connect to it.\nThe default user is pi the default password is raspberry\nssh pi@raspberrypi.local // or ip address password: raspberry   Default passwords are never good. Let\u0026rsquo;s sort, for both the root and pi users, by changing them.\nsudo passwd root Enter new UNIX password: verylongpasswdyoucannotsee passwd: password updated successfully passwd (current) UNIX password: raspberry Enter new UNIX password: verylongpasswdyoucannotsee passwd: password updated successfully   Update and upgrade Raspbian, this takes a few minutes to complete. Hit y in response to any prompts.\nsudo apt-get update sudo apt-get upgrade  \nNext we\u0026rsquo;re going to set up SSH passwordless login. This is done by transferring our public key from our Mac to a special location on the Pi Zero W.\nIf you\u0026rsquo;re a developer, it\u0026rsquo;s very likely you\u0026rsquo;ll have a private/public key pair already on your Mac, but if not, you\u0026rsquo;ll need to create one.\nOn your Pi Zero W create the following folder in your home directory.  Then set the permissions.\nmkdir /home/pi/.ssh chmod 700 /home/pi/.ssh   Create the authorized_keys file, and copy over your public key. You need to copy the contents of ~/.ssh/id_rsa.pub into this file.  Then set the permissions.\nnano /home/pi/.ssh/authorized_keys chmod 400 /home/pi/.ssh/authorized_keys chown -R pi:pi /home/pi   Open a new Terminal window - !! do not close the current window !!\nAttempt to connect.\nssh pi@raspberrypi.local   This time we should log straight in to our Pi Zero W without being prompted for a password.\nFinally, we will increase security by disabling all SSH password logins, the root user login, and restricting use of the SSH service to only the user pi.\nsudo nano /etc/ssh/sshd_config   Add, or amend, the following lines in this file.\nPermitRootLogin no PasswordAuthentication no AllowUsers pi   Restart the SSH service with sudo service ssh restart.\nStep 5. Configure a Firewall Last step was a bit intense. Step 5 is nice and easy. We\u0026rsquo;re going to install and set up a Firewall, through which we can block port access to our Pi Zero W.\nWe\u0026rsquo;re going to install and use UFW (Uncomplicated Firewall). This application provides a super easy abstraction to iptables, an application which, personally speaking, I\u0026rsquo;ve often struggled with.\nsudo apt-get install ufw   Now we need to set some rules.\nI\u0026rsquo;ll probably use my Pi Zero W as a webserver, maybe also as a client to consume API services, so I need HTTP and HTTPS, so I need to open ports 80 and 443.\nI also use Sendgrid to relay server email, and that works on port 587.\nObviously I\u0026rsquo;ll be using SSH to login in, and by default that uses port 22.\nsudo ufw default deny incoming sudo ufw allow 80 sudo ufw allow 443 sudo ufw allow 587 sudo ufw allow 22   Now, start UFW then check the configuration.\nsudo ufw enable sudo ufw status Status: active To Action From -- ------ ---- 22 ALLOW Anywhere 80 ALLOW Anywhere 443 ALLOW Anywhere 587 ALLOW Anywhere 22 ALLOW Anywhere (v6) 80 ALLOW Anywhere (v6) 443 ALLOW Anywhere (v6) 587 ALLOW Anywhere (v6)  \nWe\u0026rsquo;re firewalled. Feels good yes?  At this point our setup is fairly robust. I think so anyway.  But we can do more to make using Pi Zero W a lovely experience.\nStep 6. Hostname configuration I bet you, like me, have more than one Raspberry Pi Zero W - or will have soon!\nThey\u0026rsquo;re handy things, and cheap.\nBut, if we\u0026rsquo;re going to use more than one Pi Zero W on the same Wifi network, we have a small problem.\nUnless we want to keep identifying them by IP address, which means checking the router\u0026rsquo;s attached device list, we need a way to tell them apart, as, by default, they all have the hostname of raspberrypi, addressed as raspberrypi.local over SSH.\nThis is not useful. So let\u0026rsquo;s change it - it\u0026rsquo;s simple.\nsudo nano /etc/hostname  \nReplace the raspberrypi value in this file with the name you want. There are restrictions on what hostname can be, but I name/number mine like this.\npizero1   Confirm and save.\nNext edit this file.\nsudo nano /etc/hosts   Change the last line to match the entry you placed in the /etc/hostname file.\n127.0.1.1 pizero1   Repeat for all your pi zero w boards, and each will be separately identifiable and addressable on your Wifi network.\nFor example..\nssh pi@pizero1.local ssh pi@pizero2.local ssh pi@pizero3.local   We\u0026rsquo;re done.\nStep 6. Creating an image of your work We can\u0026rsquo;t go through this long process - as much fun as it was :/ - every time we want to configure a new Raspberry Pi Zero W, so in this final step we\u0026rsquo;re going to create an image file of everything we\u0026rsquo;ve done so far.\nThis image will give us a snapshot of the Operating System and File System, exactly as it is now. One that we can use, in place of the default Raspbian image, when we get another Pi Zero W and need an OS for it.\nWith an image, our next setup will just comprise of two simple steps!.\n1) We\u0026rsquo;ll just need to copy the image to a new Micro SD card as we did in Step 1, and then;\n2) log in, and change the hostname just like we did in Step 5.\nEverything else including Wifi, SSH passwordless login and Firewall will be preconfigured out-the-box\nTo create the image we use the DD command from the Mac Terminal application. We unmount the Micro SD card first.\nsudo diskutil unmountdisk /dev/disk2 sudo dd bs=1m if=/dev/rdisk2 of=pi/060317.img   This creates the image file 060317.img in the folder pi relative to the our current working directory.\nTo copy this image to a new Micro SD card for use in another Pi Zero W, we use the DD command again and simply reverse the parameters such that the source is pi/060317.img and the destination /dev/rdisk2.\nsudo diskutil unmountdisk /dev/disk2 sudo dd bs=1m if=pi/060317.img of=/dev/rdisk2   That\u0026rsquo;s it! We\u0026rsquo;re all done!\nConfiguring a Raspberry Pi Zero W from this image is now effortless.\nPotential stumbling blocks I\u0026rsquo;ve worked back through this process a couple of times now. I\u0026rsquo;ve had a few issues, which I\u0026rsquo;ve listed here as a heads up.\n Unmounting. If you get an unexpected error. Double check the Micro SD card is available, unmounted.\n SD Cards of same size. Turns out they are not always. So a 32GB image written back, to a new 32GB card might not always fit. I\u0026rsquo;ve seen this with a cheap 32GB Micro SD card\n SD cards of different sizes. Apparently you can write an image taken from a 32GB card back to a 16GB card, or a 16GB to an 8GB. The data of the pi image is much less than 8GB. You can also do it the other way round, but by default you lose access to the additional space outside the image. Use sudo rasp-config to expand the root partition to reclaim this space.\n Imaging takes a while. Unless you really need lots of space, working with 8GB cards is quick, consistent and cheap!\n SSH known hosts. You might be prompted that an entry exists which doesn\u0026rsquo;t match the new entry if you\u0026rsquo;re SSHing to a new Pi Zero W. Just follow the filepath and delete the line. It will then work fine.\n  ","id":10,"section":"posts","summary":"Pictured: My Raspberry Pi Zero W stand/rack. Get it on Thingiverse \nAn end-to-end log of the set-up process I followed from my Macbook What\u0026rsquo;s this all about?  Setting up a Raspberry Pi Zero W in a \u0026ldquo;headless\u0026rdquo; configuration, without a keyboard or monitor; Configuring access to multiple Wifi access points; Securing via passwordless SSH public key only login and Firewall rules configuration; Simple command line Terminal access by configuring Hostname/Hosts; Creating a custom image, which we can reuse next time we want to configure another Pi Zero W.","tags":["raspberry","pi-zero-w","golang"],"title":"Raspberry Pi Zero W \"headless\" Setup","uri":"https://slippytrumpet.io/2017/03/raspberry-pi-zero-w-setup/","year":"2017"},{"content":" Communicating using the Bluetooth protocol has traditionally been the sole preserve of native applications. Now you can do it from a web page! This is the first of two short posts on my experiments with Puck.js and Web Bluetooth. This one looks at security; the second will look at a Web Bluetooth to MQTT gateway experiment.\nWhat\u0026rsquo;s Web Bluetooth? Some may know, that from Google Chrome v56, the Web Bluetooth API went from being an experimental \u0026ldquo;opt-in\u0026rdquo; feature to enabled by default. It supports communication between devices that implement Bluetooth 4.0 (and above) and uses Bluetooth Low Energy (BLE), a more power efficient protocol.\nAs stated in the introduction earlier, once the preserve of native applications, now Web Developers can build applications which talk to physical hardware over BLE from websites - applications which match the capabilities of native apps.\nThis is exciting.\nIs it secure? Since the Chrome 56 release, some reports have cited security and privacy concerns, and many people are clamouring to turn the feature off.\nBut should they be concerned? In my view, no.\nIt\u0026rsquo;s easy to surmise that unscrupulous website owners might try and take advantage of this; that device detection could be used as a mechanism for tracking - just like cookies - but the mechanics of the Web Bluetooth API seem to have security firmly in mind. It looks like it would be hard to abuse from an application, both intentionally and inadvertently.\nFirst, it\u0026rsquo;s HTTPS only. You can\u0026rsquo;t use Web Bluetooth unless your website is served securely.\nSecond, to initiate a device scan, it has to be in response to a user action such as a mouse click or finger swipe. You can\u0026rsquo;t trigger it directly from code - and you can\u0026rsquo;t emulate these events programmatically to fool the Web Bluetooth API.\nHowever, one might argue that website visitors could be fooled.\nFor example, what if you attach an onClick event listener to the \u0026lt;body\u0026gt; element of the DOM? Would a mouse click anywhere on the page initiate a device scan?\nIt would.\nBut hold your horses, so you can do this, is there any real risk? I\u0026rsquo;d say \u0026lsquo;no\u0026rsquo; again.\nTo understand why, we need to look at what happens next. We need to look at how a device scan works; how does it notify the user of devices in range which it can connect to, and; more importantly, at what stage does the browser have access to any information about these devices (specifically, we\u0026rsquo;re concerned about information exposed by the Web Bluetooth API object - about scanned devices - which could be stored, used for connection attempts, reading service characteristics, or just just \u0026lsquo;plain evil\u0026rsquo; tracking?\nLet\u0026rsquo;s see.\nThis code initiates a Web Bluetooth device scan. You have to set it up as callback to an event listener like click, but once the event triggers, a \u0026lsquo;device chooser\u0026rsquo; pop-up will appear near the address bar of the Chrome Browser listing devices in range.\nnavigator.bluetooth.requestDevice({ acceptAllDevices: true }).then(device =\u0026gt; { console.log(device) }).catch(error =\u0026gt; { console.log(error);});  \nThe above will list all BLE devices in range, but in your application, you can define filters so that only the types of device your app can interact with, will appear. For example, use a name prefix if devices have a common name, or you can filter on GATT service (GATT represents \u0026ldquo;Generic Attribute Profile\u0026rdquo;, and broadly put, GATT services describe what a device is able to do).\nFollowing the scan, the user is able to pick the device they want the web page to connect to, but until they do, our script can\u0026rsquo;t process code to connect, and our script/web page knows NOTHING about the devices in the device chooser, the devices in range.\nAlso that \u0026lsquo;device chooser\u0026rsquo;.. it\u0026rsquo;s a part of the Chrome browser application, and nothing to do with the webpage and its DOM. So you can\u0026rsquo;t interact with it from code.\nFrom here the user can choose a device, or cancel. I\u0026rsquo;ve noticed ignoring the device chooser and doing something else like opening the Developer Console will trigger \u0026lsquo;cancel\u0026rsquo; too - I don\u0026rsquo;t know what other actions will do this.\nIn the above code \u0026lsquo;cancelling\u0026rsquo;, however activated, will cause an error to be logged to console.\nIf the user chooses to connect to a device, then a BluetoothDevice object is passed to the script which, for my Puck device, contains the following information.\nBluetoothDevice { id: \u0026quot;0L3/Rdv+ZzblpiXmJPlO3A==\u0026quot;, name: \u0026quot;Puck.js bb18\u0026quot;, gatt: BluetoothRemoteGATTServer, ongattserverdisconnected: null }   But, remember, I allowed the web application to see this, by allowing my browser to connect to it.\nThis device scan \u0026amp; connection process must be followed every time the user wants to connect a device - as far as I can tell there is no memorizing, nor any pairing.\nSo this looks fairly secure to me. Hard for web developers to abuse.\nCan networks of websites leverage Web Bluetooth? Like they might do cookies?\nI don\u0026rsquo;t know, but in my testing, the BluetoothDevice.id is not a constant. It seems to be random and rotates on connection. So, if trying to track JUST allowed/connected devices, you could not rely on id website to website. BluetoothDevice.name can be constant though.\nCan Google see any data\u0026hellip;? What if you compromise Chrome\u0026hellip;? Is the API secure\u0026hellip;? We\u0026rsquo;ll all know in time.\nBut, the last point I want to make on Web Bluetooth, is that where Web Bluetooth offers no data on, nor any programmatic access to, devices in range.. a native app, written in Node, Go, C or similar, running on hardware as accessible and cheap as a Raspberry Pi 3, will give you a lot of info - without asking for any permission whatsoever!\nSo, if you\u0026rsquo;re going to be tracked unknowingly via your Bluetooth devices, it\u0026rsquo;s less likely to be via a website, than from a cheap home built Bluetooth scanner, running out of someone\u0026rsquo;s living room.\nSo, that said, what can you do with Web Bluetooth? Since security is the general theme of this post, I\u0026rsquo;ve built a totally impractical 2 factor authentication demo which uses Puck.js as a hardware fob to authenticate the user, a bit like how the banks do with online account access.\nIt\u0026rsquo;s impractical since it\u0026rsquo;s all client side, so not secure, but some server calls could remedy this. But you\u0026rsquo;d still need a Puck to use it!\nYou can see the interface here. The website sends a random four colour sequence to the Puck (which has three onboard LEDs - Red, Green and Blue).\nThe sequence, once replicated on the web form interface, unlocks the form so that it can be submitted.\nVideo below shows how it works.\n Are you pucker?\nA video posted by Ollie (@slippytrumpet) on Feb 9, 2017 at 9:44am PST\n \nI\u0026rsquo;ve also written a Web Bluetooth MQTT gateway which facilitates master/slave communication between Pucks, console control of multiple Pucks at the same time, as well as communication of data over MQTT.\nI will cover this in another post.\n","id":11,"section":"posts","summary":"Communicating using the Bluetooth protocol has traditionally been the sole preserve of native applications. Now you can do it from a web page! This is the first of two short posts on my experiments with Puck.js and Web Bluetooth. This one looks at security; the second will look at a Web Bluetooth to MQTT gateway experiment.\nWhat\u0026rsquo;s Web Bluetooth? Some may know, that from Google Chrome v56, the Web Bluetooth API went from being an experimental \u0026ldquo;opt-in\u0026rdquo; feature to enabled by default.","tags":["espruino","webbluetooth","mqtt","websockets","puckjs"],"title":"A little bit of Web Bluetooth","uri":"https://slippytrumpet.io/2017/02/a-little-bit-of-web-bluetooth/","year":"2017"},{"content":" A broken radio controlled microcar; just lying in a box, useless. A little knowledge of Espruino and winter nights closing in. \u0026ldquo;We can make this car work again - but over Wifi\u0026rdquo;, I told the kids. And that was my first mistake. First, one of those, \u0026ldquo;blimey this is a long post; maybe I won\u0026rsquo;t bother\u0026rdquo; things.. AKA \u0026ldquo;TL;DR\u0026rdquo;.\nEspruino/JavaScript code which runs on a NodeMCU ESP8266 microcontroller and does this..\n Provides motor and steering control functions on NodeMCU ESP8266 pins connected to a dual H-bridge module; Includes a HTML page to serve which allows us to control the car from a Smartphone on the same Wifi network (tested on iPhone); Creates a http/websocket server, which serves the HTML page in (2) and creates a websocket connection which listens for message events from (2) and passes them to (1);  ..can be found here.  You\u0026rsquo;re still here? Excellent.  What is Espruino? Let\u0026rsquo;s cover this first. Espruino is a JavaScript interpreter on a microcontroller.\nThe project itself comprises both the official microcontroller hardware - there are three different boards: Espruino, Espruino Pico, and the latest, Espruino Wifi - and the firmware binary which is a C application that gets flashed (written) to the microcontroller.\nThe microcontroller boards have a number of pins that can be written to and read from - their voltage determining their state. The pins can be connected to \u0026ldquo;things\u0026rdquo; so you can literally write JavaScript to control them.\nEspruino is open source, the firmware can be freely downloaded and there are builds for other microcontrollers based on a similar chip architecture. There are even builds for Linux, so you could use Espruino with a Raspberry Pi.\nImplementations vary though. Some builds may not give you all the features of Espruino, and only the official Espruino boards are fully supported and guaranteed to work \u0026ldquo;out-the-box\u0026rdquo;. It\u0026rsquo;s also worth noting that some boards won\u0026rsquo;t offer as much memory as the official boards which can limit their usefulness for some applications.\nFor this project I used an ESP8266 NodeMCU development board. They are cheap, have built in Wifi, and enough memory for my application.\nBefore I move on, I should emphasise that Espruino is funded through donations and sales of official boards. Though I\u0026rsquo;m choosing ESP8266 here, I own plenty of the original boards - two Espruino, three Picos and one Espruino Wifi in fact.\nWhen starting out it\u0026rsquo;s a really good idea to get an official board just because they are plug and play. You\u0026rsquo;ll get good support in the Espruino forums too, plus you\u0026rsquo;ll find them useful when prototyping even if your project will eventually run on unofficial hardware.\nThe objective Essentially to drive the car over Wifi, maybe even remotely over the Internet, using a web page to control it. For communications, MQTT was my first inclination since I could leave the RC car behind a firewall, whereas using Websockets and a HTTP server I\u0026rsquo;d have to expose the car to the world via port forwarding. But more on this later.\nFirst attempt Our donor car was a radio controlled microcar not much bigger than a matchbox car - remember those? I think the scale was something like 1:42.\nThe steering mechanism of the RC microcar was broken, reason unknown - but it only steered one way. On inspection the steering was operated using two solenoid coils and a magnet on a steering rack. With current applied to each coil the steering rack moved left and right - or should have.\nWithout using the circuit board of the RC car, I did not understand how I could control the solenoid setup - even if it wasn\u0026rsquo;t broken, and what if it was the circuit board itself that was faulty?\nSo my first decision was to remove the solenoids, magnet and the circuit board from the car.\nIn their place I sourced a tiny micro servo on ebay, glued it in and created a simple linkage to the steering rack with stiff wire.\nSteering was sorted, but this was a fiddly job and the addition of the servo made it likely the car\u0026rsquo;s body would not fit back on without modification.\n Pictured: Micro servo, attached to steering rack \nNext issue, \u0026ldquo;drive\u0026rdquo; After some help from a couple of people in the Espruino forums I better understood what was involved in controlling the motor - which required switching the supply polarity to provide forward and reverse motion.\nMy first attempt used multiple ESP8266 pins, in pairs which I switched as groups between high and low state, essentially wiring them in parallel to hopefully provide sufficient current to drive the motor.\nUnfortunately this didn\u0026rsquo;t work. The motor was rated 75mA at 4.5v. The ESP8266 NodeMCU board could supply 12mA at 3.7v per pin. I wasn\u0026rsquo;t going to have enough pins to get that current.\nAt this point I wondered about using my Espruino Wifi instead, which I believe can provide 20mA per pin, possibly enough when grouped in parallel. And maybe I would have gone this route, had discussion in the forums not focussed my attention on something call a \u0026ldquo;H-bridge\u0026rdquo;.\nA H-bridge is a circuit which operates like a 3 way switch. It allows polarity of voltage to be reversed, which when connected to a motor, rotates it in opposing directions - forward and reverse for our purposes.\nAfter more discussion, and the prospect of making a H-bridge circuit myself from the component parts, I chickened out and went back to ebay where I found a dual H-bridge module for about £1.50 delivered. To control our motor we needed only one of the H-bridge channels.\nBut there was no way the car\u0026rsquo;s shell was going to fit back on now, modified or not.\n Pictured: L9110S Dual H-bridge module \nI\u0026rsquo;m not going to cover wiring, pin selection nor code yet, since this is not how the car ended up and could confuse.\nI\u0026rsquo;ll cover all this later, but here\u0026rsquo;s the finished \u0026ldquo;first attempt\u0026rdquo;. Now devoid of shell, obviously I went to a lot of trouble to make it look like a car again. Check that rear spoiler out!\n Pictured: Micro servo, 3.7v li-ion battery, NodeMCU ESP8266, H-bridge \nAt this point we had a working car and a basic code library, which combined allowed us to control the car over Telnet (wireless console) to send stop/go/direction commands.\nWe got about 20 minutes out of it. Then the car ceased to steer. The micro servo was turning but did not make its stops with the control arm. I had a look inside and it appeared one of the tiny gears had stripped its teeth. I could have ordered a replacement micro servo, but for it to potentially happen again. So this didn\u0026rsquo;t seem like a great idea.\nFortunately, my kids were now interested enough in the potential of the project, that they donated another RC car.\nActually they sold it to me :/\nSecond attempt One bit of feedback from my kids. Despite my efforts, it didn\u0026rsquo;t look like a car. The broken RC microcar was previously a Lamborghini but look what I had turned it into - a monster.\nFortunately, the new donor vehicle, a Mini, was much bigger. We would have no issues with space or refitting the shell.\nTwo other plus points: first, steering on this car was motor driven. I wouldn\u0026rsquo;t need to add a servo or scratch my head over solenoids, we could use the second channel of the H-bridge to control the steering motor and second; power. The car carried 4 AA batteries, so supplied 6v. I could run that to the 5v power input on the NodeMCU board and we would have enough for everything.\nBuilding Building the second car was almost trivial. Most of the learning had been done with the first car, and there was so much room to play with.\nPower was from the batteries and the two motors had wires we easilly extended and routed to the two channels of the H-bridge. All the components were mounted with hot glue.\nWiring had to be modified slightly to accomodated a second motor attached to the H-bridge, but this second build probably only took about 30 minutes.\nWe added a buzzer to work as a horn which, as well as being controllable over wifi, we decided would serve to notify us once the car had successfully connected to the Wifi network - there\u0026rsquo;d be no point trying to control the car until it had.\n Pictured: RC Mini shell and floorpan, with the NodeMCU and H-bridge module and buzzer glued in. \nThe code library also needed to be modified to control the steering. You can find the full library on Github here, but here\u0026rsquo;s the control piece.\n// Control methods for espruinoCar 'ec' var ec = { pin: { forward: D4, reverse: D5, left: D14, right: D0, horn: D12 }, left: function() { digitalWrite(ec.pin.left, 1); digitalWrite(ec.pin.right, 0); }, right: function() { digitalWrite(ec.pin.right, 1); digitalWrite(ec.pin.left, 0); }, ahead : function() { digitalWrite(ec.pin.left, 0); digitalWrite(ec.pin.right, 0); }, drive: function(speed, time){ if(time){ setTimeout(function(){ analogWrite(ec.pin.forward, 0); }, ec.convert.time(time)); } analogWrite(ec.pin.forward, ec.convert.speed(speed)); analogWrite(ec.pin.reverse, 0); }, reverse: function(speed, time) { if(time){ setTimeout(function(){ analogWrite(ec.pin.reverse, 0); }, ec.convert.time(time)); } analogWrite(ec.pin.reverse, ec.convert.speed(speed)); analogWrite(ec.pin.forward, 0); }, stop: function() { analogWrite(ec.pin.forward, 0); analogWrite(ec.pin.reverse, 0); digitalWrite(ec.pin.left, 0); digitalWrite(ec.pin.right, 0); }, horn: { toot: function() { setTimeout(function(){ digitalPulse(ec.pin.horn, 1, 200); },300); digitalPulse(ec.pin.horn, 1, 200); }, honk: function() { digitalPulse(ec.pin.horn, 1, 1000); } }, init: function() { pinMode(ec.pin.left, \u0026quot;output\u0026quot;); pinMode(ec.pin.right, \u0026quot;output\u0026quot;); pinMode(ec.pin.forward, \u0026quot;output\u0026quot;); pinMode(ec.pin.reverse, \u0026quot;output\u0026quot;); pinMode(ec.pin.horn, \u0026quot;output\u0026quot;); analogWrite(ec.pin.forward, 0); analogWrite(ec.pin.reverse, 0); digitalWrite(ec.pin.left, 0); digitalWrite(ec.pin.right, 0); }, convert: { speed : function(speed) { var convSpeed = speed/100; return convSpeed; }, time : function(time) { var convTime = time* 1000; return convTime; } } };   One thing to note. The pin numbers on the NodeMCU board do not relate to the GPIO pin numbers you need to access them via Espruino, which makes wiring more complicated than it should be. So for clarity the pin references in the excerpt above all relate to the GPIO pin numbers, not the numbers printed on the board.\nThe code is fairly self-explanatory I should think. The drive and reverse methods accept speed and time arguments, so the car can be programmed to cover a course with this library alone should we wish.\nThere are also two utility functions; one which relates speed to a number between 0 and 1, the parameter range for the analogWrite() function and a second, which converts time to a number in milliseconds for the setTimeout() function.\nCommunicating over MQTT I mentioned earlier that we wanted to control the RC car over Wifi, possibly remotely over the web too.\nMQTT seemed a good choice for communication. The RC car could subscribe (listen) to a topic on a MQTT broker (of which there are many free/test ones) and our client on iPhone would publish short control messages to the MQTT broker via a websocket connection.\nThe advantage was that we didn\u0026rsquo;t need a direct HTTP connection to the car - something that could be abused. With MQTT the RC car would not serve anything but instead simply listen for messages. It could do this from behind the Wifi router\u0026rsquo;s firewall too.\n Pictured: Publishing control messages to our RC car. \nHowever I decided it was unlikely we\u0026rsquo;d control the car over the Internet in reality, so it would be sufficient to either connect the RC Car to Wifi, or run the ESP8266 NodeMCU as an access point - whereby it creates a Wifi network we can join, and can expose HTTP on the IP address 192.168.4.1.\nUsing the ESP8266 as an access point would necessitate that it serve all the code and assets we\u0026rsquo;d need for our web based control panel too. While possible this would be significantly more complex, since there\u0026rsquo;s no filesystem on Espruino as such. We\u0026rsquo;d need to persist the assets by writing them to flash memory and we\u0026rsquo;d need to serve them by reading them back from flash memory.\nSo I elected to use the ESP8266 in station mode, connecting to an existing Wifi network so that any client accessing the HTML control panel page could download the assets required by the page from the Internet.\nWe\u0026rsquo;d still use websockets to send data, but to a websocket server running on the ESP8266 rather than relaying via an MQTT broker.\nThe Controller First things first. Since there was no display on the car, and no communication about the Wifi connection other than a horn toot when connected, it would be helpful to know the IP address in advance.\nTypically routers will assign IP addresses on a \u0026ldquo;first come first served\u0026rdquo; basis, meaning our car\u0026rsquo;s IP address would be random, depending on what else was on the network when we switched it on. With no display we\u0026rsquo;d either have to guess it or connect to the Router every time to determine it.\nThere\u0026rsquo;s a better way - so the first thing I did was connect the ESP8266 NodeMCU to my Wifi network. Once identified in the Router control panel, I assigned it a specific \u0026lsquo;reserved\u0026rsquo; IP address.\nNow it would always join the network on the same IP address, so I knew how to reliably connect to the HTTP/Websocket server I was about to write.\nIntroducing iotUI.js iotUI.js is a suite of web component controls that I started writing last year. The controls up until this point were mainly aimed at beer brewing so included things like a thermometer and level guages. The interfaces themselves are SVG graphics, which respond to touch and mouse events.\niotUI.js is built on Riot.js, which is like React, but much easier to get along with in my opinion. As a library it\u0026rsquo;s also more lightweight than React.\nRiot.js allows us to create custom HTML components referred to as \u0026ldquo;tags\u0026rdquo; and specify all the logic for how the control works in the tag itself.\nTo cut what could be a long story, short, all the complexity of adding, interfacing and interacting with the component is abstracted away from the end user. Adding a Riot component to your HTML page that may take input, or trigger events is pretty much as simple as adding a single HTML tag.\nI decided to build my control interface with Riot.js, but then went a step further and implemented the component - a steering wheel - in iotUI.js.\nShould you wish, you can easilly implement it in your projects too.\nI must mention that I didn\u0026rsquo;t design this steering wheel from scratch, but modified it for my needs based on this image here. As per the Creative Commons share-alike licensing the image is offered under, you can find the modified SVG here.\nThe code for the component is fairly simple; it basically creates event emitters on all the buttons and, using HTML device orientation, a \u0026lsquo;steer\u0026rsquo; event is emitted as the smartphone is rotated like a steering wheel.\nIf you\u0026rsquo;re interested in how a Riot component is written you can inspect the code for the tag here.\nAdding the component to the page, is a simple as this:\n\u0026lt;iotui-f1wheel id=\u0026quot;wheel1\u0026quot; wheellabel=\u0026quot;iotUI.js\u0026quot; primarybuttonlabel=\u0026quot;TOOT\u0026quot; startbuttonlabel=\u0026quot;START/STOP\u0026quot; secondarybuttonlabel=\u0026quot;HONK\u0026quot; width=\u0026quot;540\u0026quot;\u0026gt; \u0026lt;/iotui-f1wheel\u0026gt;   You can see that various attributes can be set to denote, wheel and button labels.\nI\u0026rsquo;ve embedded the actual steering wheel component below - open your web browser\u0026rsquo;s javascript console if you like and give the buttons a go! You\u0026rsquo;ll see all emitted events logged to the console.\nMy MacBook Pro also seems to have a tilt sensor - if you\u0026rsquo;re using a MacBook too, try tipping it forwards and away from you. You\u0026rsquo;ll see some steer event changes, albeit not very useful ones.\n\nThe entire HTML page, which also includes the websocket connection and event handlers to send control information back to the websocket server running on the NodeMCU connected to our RC car, looks like this:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt;\u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;\u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width, user-scalable=no, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;iotui-f1wheel id=\u0026quot;wheel1\u0026quot; wheellabel=\u0026quot;iotUI.js\u0026quot; primarybuttonlabel=\u0026quot;TOOT\u0026quot; startbuttonlabel=\u0026quot;START/STOP\u0026quot; secondarybuttonlabel=\u0026quot;HONK\u0026quot; width=\u0026quot;540\u0026quot;\u0026gt;\u0026lt;/iotui-f1wheel\u0026gt;\t\u0026lt;script\u0026gt; var ws; var evnt = {}; ws = new WebSocket(\u0026quot;ws://\u0026quot; + location.host + \u0026quot;/espruinocar\u0026quot;, \u0026quot;protocolOne\u0026quot;); function ignitionHandler(){ evnt.type = \u0026quot;ignition\u0026quot;; evnt.state = this.state.ignition; ws.send(evnt); } function driveHandler(){ evnt.type=\u0026quot;drive\u0026quot;; evnt.state = this.state.drive; ws.send(evnt); } function primaryHandler(){ evnt.type=\u0026quot;primarybuttonpush\u0026quot;; ws.send(evnt); } function secondaryHandler(){ evnt.type=\u0026quot;secondarybuttonpush\u0026quot;; ws.send(evnt); } function steeringHandler(){ evnt.type=\u0026quot;steer\u0026quot;; evnt.state=this.state.steer; ws.send(evnt); } window.onload = function(){\tiotUI.addListener('wheel1', 'ignition', ignitionHandler); iotUI.addListener('wheel1', 'primarybuttonpush', primaryHandler); iotUI.addListener('wheel1', 'secondarybuttonpush', secondaryHandler); iotUI.addListener('wheel1', 'drive', driveHandler); iotUI.addListener('wheel1', 'steer', steeringHandler); } \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;https://rawgit.com/olliephillips/iotUI.js/master/iotUI.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Websocket server We\u0026rsquo;re nearly there.\nTo recap, we have an Espruino powered RC car; a control library that will send signals to ESP8266 NodeMCU pins; a web component built with Riot.js which will provide a control interface and; a HTML page in which we\u0026rsquo;ll serve the component.\nSo to the final piece of the puzzle. We need a HTTP server to serve the HTML page and a websocket server, to listen for websocket messages from our web component, and relay them to our control library.\nFirst the servers - actually it\u0026rsquo;s just one server since the websockets module for Espruino, which upgrades the connection to a websocket, can also function as a HTTP server and serve our HTML:\nvar wifi = require(\u0026quot;Wifi\u0026quot;); var ap = { \u0026quot;ssid\u0026quot;: \u0026quot;wif_ssid\u0026quot;, \u0026quot;pwd\u0026quot;: \u0026quot;wifi_password\u0026quot; }; // Our servePage handler which renders our controls function servePage(req, res) { var page='\u0026lt;!DOCTYPE html\u0026gt;\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\u0026lt;head\u0026gt;\u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;\u0026lt;meta name=\u0026quot;viewport\u0026quot;'; page+='content=\u0026quot;width=device-width, user-scalable=no, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0\u0026quot;\u0026gt;\u0026lt;/head\u0026gt;'; page+='\u0026lt;body\u0026gt;\u0026lt;iotui-f1wheel id=\u0026quot;wheel1\u0026quot; wheellabel=\u0026quot;EspruinoCar\u0026quot; primarybuttonlabel=\u0026quot;TOOT\u0026quot; startbuttonlabel=\u0026quot;START/STOP\u0026quot;'; page+='secondarybuttonlabel=\u0026quot;HONK\u0026quot; width=\u0026quot;540\u0026quot;\u0026gt;\u0026lt;/iotui-f1wheel\u0026gt;'; page+='\u0026lt;script\u0026gt;var ws;var send={};ws=new WebSocket(\u0026quot;ws://\u0026quot; +'; page+='location.host + \u0026quot;/espruinocar\u0026quot;, \u0026quot;protocolOne\u0026quot;);function ignitionHandler()'; page+='{send.type=\u0026quot;ignition\u0026quot;;send.state=this.state.ignition;ws.send(JSON.stringify(send));console.log(JSON.stringify(send));}function driveHandler()'; page+='{send.type=\u0026quot;drive\u0026quot;;send.state=this.state.drive;ws.send(JSON.stringify(send));console.log(JSON.stringify(send));}function primaryHandler()'; page+='{send.type=\u0026quot;primarybuttonpush\u0026quot;;send.state=null;ws.send(JSON.stringify(send));console.log(JSON.stringify(send));}function secondaryHandler()'; page+='{send.type=\u0026quot;secondarybuttonpush\u0026quot;;send.state=null;ws.send(JSON.stringify(send));console.log(JSON.stringify(send));}function steeringHandler()'; page+='{send.type=\u0026quot;steer\u0026quot;;send.state=this.state.steer;ws.send(JSON.stringify(send));console.log(JSON.stringify(send));}window.onload=function(){'; page+='iotUI.addListener(\u0026quot;wheel1\u0026quot;, \u0026quot;ignition\u0026quot;, ignitionHandler);iotUI.addListener(\u0026quot;wheel1\u0026quot;, \u0026quot;primarybuttonpush\u0026quot;,'; page+='primaryHandler);iotUI.addListener(\u0026quot;wheel1\u0026quot;, \u0026quot;secondarybuttonpush\u0026quot;, secondaryHandler);iotUI.addListener(\u0026quot;wheel1\u0026quot;,'; page+='\u0026quot;drive\u0026quot;, driveHandler);iotUI.addListener(\u0026quot;wheel1\u0026quot;, \u0026quot;steer\u0026quot;, steeringHandler);}\u0026lt;/script\u0026gt;'; page+='\u0026lt;script src=\u0026quot;https://rawgit.com/olliephillips/iotUI.js/master/iotUI.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;'; res.writeHead(200, {'Content-Type': 'text/html'}); res.end(page); } // Start everything function initCar() { // Initialise pins ec.init(); // Wifi connection wifi.connect(ap.ssid, {\u0026quot;password\u0026quot;: ap.pwd}, function(err){ if(!err){ var server = require('ws').createServer(servePage); server.listen(8000); server.on(\u0026quot;websocket\u0026quot;, function(ws) { ws.on('message', function(evt){ var ev = JSON.parse(evt); controlMap(ev); }); }); // Signal connected to wifi ec.horn.toot(); } }); } // Start up from boot E.on(\u0026quot;init\u0026quot;, initCar);   Next, the controlMap(evt) function into which we pass the websocket event message, an object with two properties \u0026lsquo;type\u0026rsquo; and \u0026lsquo;state\u0026rsquo;, and in which there is logic which maps the event to the control library (ec):\n// Maps events received over websocket to ec object controls function controlMap(event){ var forwardSpeed = 70; var reverseSpeed = 40; console.log(\u0026quot;message:\u0026quot; + event.type +\u0026quot;:\u0026quot; + event.state); switch (event.type){ case \u0026quot;ignition\u0026quot;: if (event.state == \u0026quot;off\u0026quot;){ec.stop();} break; case \u0026quot;steer\u0026quot;: switch(event.state){ case \u0026quot;left\u0026quot;: ec.left(); break; case \u0026quot;neutral\u0026quot;: ec.ahead(); break; case \u0026quot;right\u0026quot;: ec.right(); break; } break; case \u0026quot;drive\u0026quot;: switch(event.state){ case \u0026quot;stop\u0026quot;: ec.stop(); break; case \u0026quot;forward\u0026quot;: ec.drive(forwardSpeed); break; case \u0026quot;reverse\u0026quot;: ec.reverse(reverseSpeed); break; } break; case \u0026quot;primarybuttonpush\u0026quot;: ec.horn.toot(); break; case \u0026quot;secondarybuttonpush\u0026quot;: ec.horn.honk(); break; } }   And that\u0026rsquo;s it!\nAll that remains is to upload this code to our ESP8266 on the RC Car, and then save it using save() in the console on the left of the Espruino Web IDE. Now whenever the car starts the E.on(\u0026quot;init\u0026quot;, initCar) piece will run our initCar function and the car will connect to the Wifi network.\nSo we disconnect USB, and switch on the car.\nWait for the horn toot, then connect to http://192.168.0.19:8000 from our smartphone browser and off we go!\nActually there\u0026rsquo;s a small gotcha on iPhone. Browsers on iPhone, whether Safari, Chrome or Firefox are all based on Webkit, which does not support the HTTP/1.0 standard, at least not for the purpose of upgrading the connection to websocket, but HTTP/1.0 is the standard used by Espruino.\nYou can fix this by taking a HEX editor to the Espruino binary and replacing all text instances of \u0026ldquo;HTTP/1.0\u0026rdquo; of which there are two, with \u0026ldquo;HTTP/1.1\u0026rdquo;. This is enough to bamboozle the browser into thinking it\u0026rsquo;s a HTTP/1.1 standard connection, and it seems to upgrade it to websocket with no apparent detrimental side effects.\nFlash the customized binary to your ESP8266 and you are away. Thanks to Gordon Williams, the man behind Espruino itself, for that clever idea!\nDon\u0026rsquo;t forget, if some of the above code snippets are not that clear, all the code is available here.\nFinally, my favorite picture if not the best quality one. My two youngest driving their Espruino powered remote control car.\n Pictured: First drive of our Espruino Wifi remote control car. \nHave fun!\n var evnt = {} function output(evnt) { console.log(\"Event: '\" + evnt.type + \"' fired. State: '\" + evnt.state + \"'\"); } function ignitionHandler(){ evnt.type = \"ignition\"; evnt.state = this.state.ignition; output(evnt); } function driveHandler(){ evnt.type=\"drive\"; evnt.state = this.state.drive; output(evnt); } function primaryHandler(){ evnt.type=\"primarybuttonpush\"; output(evnt); } function secondaryHandler(){ evnt.type=\"secondarybuttonpush\"; output(evnt); } function steeringHandler(){ evnt.type=\"steer\"; evnt.state=this.state.steer; output(evnt); } window.onload = function(){ iotUI.addListener('wheel1', 'ignition', ignitionHandler); iotUI.addListener('wheel1', 'primarybuttonpush', primaryHandler); iotUI.addListener('wheel1', 'secondarybuttonpush', secondaryHandler); iotUI.addListener('wheel1', 'drive', driveHandler); iotUI.addListener('wheel1', 'steer', steeringHandler); }   ","id":12,"section":"posts","summary":"A broken radio controlled microcar; just lying in a box, useless. A little knowledge of Espruino and winter nights closing in. \u0026ldquo;We can make this car work again - but over Wifi\u0026rdquo;, I told the kids. And that was my first mistake. First, one of those, \u0026ldquo;blimey this is a long post; maybe I won\u0026rsquo;t bother\u0026rdquo; things.. AKA \u0026ldquo;TL;DR\u0026rdquo;.\nEspruino/JavaScript code which runs on a NodeMCU ESP8266 microcontroller and does this.","tags":["espruino","esp8266","websockets","riotjs","html5","nodeMCU"],"title":"Building a Remote Control Car with Espruino on ESP8266","uri":"https://slippytrumpet.io/2016/11/building-an-rc-car-with-espruino-on-esp8266/","year":"2016"},{"content":" Recently I implemented TLS using Let\u0026rsquo;s Encrypt for two Go applications. I thought I\u0026rsquo;d outline the process I followed and mention a couple of issues I had. Let\u0026rsquo;s Encrypt is a fabulous service. In making TLS freely accessible to the masses it\u0026rsquo;s helping make the Internet a more secure place.\nFor Go applications, there\u0026rsquo;s no automatic install and renewal route, the process you follow to obtain a certificate takes you via the \u0026ldquo;standalone\u0026rdquo; option.\nAlternatively, you can use a helper package such as ACMEWrapper in your application; add a bit of code and ACMEWrapper automatically handles certificate creation and more importantly renewal, since Let\u0026rsquo;s Encrypt certificates expire every 90 days.\nI didn\u0026rsquo;t use ACMEWrapper. In fact I only learned of this package after my TLS deployments were done. But even without one of these helper packages, the process of certificate creation and renewal via the \u0026ldquo;standalone\u0026rdquo; route is straightforwards:\n Install the Let\u0026rsquo;s Encrypt client \u0026ldquo;Certbot\u0026rdquo; on your server; Run a single command to generate the certificates for the required domain; Either copy, or symlink, the required key and certificate files to your application.  Unbind all your things To create a certificate for a domain, Let\u0026rsquo;s Encrypt needs to validate you control the domain.\nIf you\u0026rsquo;re generating the certificates on the server on you which you want to use them, this requires that port 80 and/or 443 are available to Certbot. This means you\u0026rsquo;ll have to unbind anything running on those ports, which typically means you\u0026rsquo;ll have to stop your application(s) for the duration of the certificate creation process.\nCertbot makes you aware if it can\u0026rsquo;t use the ports it needs, so this is a minor obstacle and quickly overcome. I only mention it in case your application already has users - you\u0026rsquo;ll want to consider when best to run Certbot.\nNo big deal but my first issue - my application was already live, and had to go offline for about 20 seconds to free those ports for Certbot.\nI think your SSL has expired? Certbot \u0026ldquo;standalone\u0026rdquo; creates four files after successfully completing.\ncert.pem chain.pem fullchain.pem privkey.pem   Your go application needs two - but which two?\nYou need a private key, so privkey.pem is an obvious pick. You also need the certificate itself, so cert.pem is a reasonable choice too.\nBut you need to use the less obviously named fullchain.pem for the certificate in your Go application. This file combines server, root and intermediate certificates into one.\nChoose the more obvious cert.pem (as I did) and though the certificate may look good to you and many others, you\u0026rsquo;ll get reports from people using some browsers saying your SSL has expired or your TLS is broken, and they can\u0026rsquo;t or won\u0026rsquo;t use your site.\nHard to debug.\nSo why fullchain.pem? Though my knowledge is limited, broadly it seems to relate to the fact that Let\u0026rsquo;s Encrypt certificates are currently cross signed by Identrust to ensure browser acceptance. Let\u0026rsquo;s Encrypt is not as yet a root authority so needs this, especially to appear trusted in older browsers.\n","id":13,"section":"posts","summary":"Recently I implemented TLS using Let\u0026rsquo;s Encrypt for two Go applications. I thought I\u0026rsquo;d outline the process I followed and mention a couple of issues I had. Let\u0026rsquo;s Encrypt is a fabulous service. In making TLS freely accessible to the masses it\u0026rsquo;s helping make the Internet a more secure place.\nFor Go applications, there\u0026rsquo;s no automatic install and renewal route, the process you follow to obtain a certificate takes you via the \u0026ldquo;standalone\u0026rdquo; option.","tags":["golang","letsencrypt","TLS"],"title":"Let's Encrypt and Go","uri":"https://slippytrumpet.io/2016/10/letsencrypt-and-go/","year":"2016"},{"content":" Maybe you heard. The commercial entity behind RethinkDB will soon be no more. The project will hopefully continue as community driven open source, although the details are unclear - the who and how has yet to be ironed out.\nFrom my first encounter with the database it was clear that RethinkDB had something going on. A performant document oriented database had to be a given, yes. But the glorious admin UI, effortless clustering, and intuitive ReQL query language were lovely to see and use; the extensive documentation and examples, great to fall back on.\nBut, for all of this goodness it was, I think, the team - the people behind RethinkDB - that made the biggest impression. Their knowledge and their command of branding, marketing and community engagement, positioned RethinkDB as a database that was bound to succeed, or so I thought. Like many individuals and organizations I began to evaluate and deploy RethinkDB with my applications - and I have nothing but good to say about it.\nSo why the demise?\nSo far there haven\u0026rsquo;t been many details released and I\u0026rsquo;m keen to understand more as I\u0026rsquo;m sure many are. But I suppose the money ran out and the user community and acquisition rate didn\u0026rsquo;t merit additional investment. That\u0026rsquo;s usually the bones of it.\nOne missed opportunity - or nail in the coffin, depending on your viewpoint - was that at the time of the acquisition of Compose.io - a cloud database provider - by IBM in July 2015, RethinkDB was available via Compose.io. You could get started with a multiple node RethinkDB cluster just as easilly as setting up some shared hosting.\nPost acquisition, IBM went on to integrate many of the Compose.io database services into their own up-and-coming Bluemix Cloud service, but RethinkDB was notably absent.\nWhilst Compose.io continued to offer RethinkDB, I can\u0026rsquo;t help but think availabilty through Bluemix itself, could have been a springboard for growth.\nI did ask IBM Bluemix about RethinkDB and was only told \u0026ldquo;it\u0026rsquo;s on the way\u0026rdquo;. Oddly, it didn\u0026rsquo;t show up in Bluemix until around the time RethinkDB announced they were shutting down as an organisation.\nI don\u0026rsquo;t quite know what to make of that. At best it\u0026rsquo;s miserable timing.\nBut looking to the future.\nMany of the engineering team I understand are now working with Stripe, and an element are also trying to kickstart RethinkDB into a community developed open source project.\nIf you want to get involved, check out the information here and complete the form. I have.\nSo it seems we are at the end of the beginning, but hopefully not the end of RethinkDB. As a RethinkDB fan and user, to the people behind the product and the community\u0026hellip;\n\u0026ldquo;Thank you and good luck.\u0026rdquo;\n","id":14,"section":"posts","summary":"Maybe you heard. The commercial entity behind RethinkDB will soon be no more. The project will hopefully continue as community driven open source, although the details are unclear - the who and how has yet to be ironed out.\nFrom my first encounter with the database it was clear that RethinkDB had something going on. A performant document oriented database had to be a given, yes. But the glorious admin UI, effortless clustering, and intuitive ReQL query language were lovely to see and use; the extensive documentation and examples, great to fall back on.","tags":["rethinkdb","databases","startups"],"title":"RethinkDB. The end of the Beginning, not the End.","uri":"https://slippytrumpet.io/2016/10/rethinkdb-the-end-of-the-beginning/","year":"2016"}],"tags":[{"title":"3Dprinting","uri":"https://slippytrumpet.io/tags/3dprinting/"},{"title":"badgerdb","uri":"https://slippytrumpet.io/tags/badgerdb/"},{"title":"blockchain","uri":"https://slippytrumpet.io/tags/blockchain/"},{"title":"cyrptocurrency","uri":"https://slippytrumpet.io/tags/cyrptocurrency/"},{"title":"daemon","uri":"https://slippytrumpet.io/tags/daemon/"},{"title":"databases","uri":"https://slippytrumpet.io/tags/databases/"},{"title":"drones","uri":"https://slippytrumpet.io/tags/drones/"},{"title":"efmq","uri":"https://slippytrumpet.io/tags/efmq/"},{"title":"esp8266","uri":"https://slippytrumpet.io/tags/esp8266/"},{"title":"espruino","uri":"https://slippytrumpet.io/tags/espruino/"},{"title":"ethereum","uri":"https://slippytrumpet.io/tags/ethereum/"},{"title":"ethernet","uri":"https://slippytrumpet.io/tags/ethernet/"},{"title":"gcode","uri":"https://slippytrumpet.io/tags/gcode/"},{"title":"golang","uri":"https://slippytrumpet.io/tags/golang/"},{"title":"html5","uri":"https://slippytrumpet.io/tags/html5/"},{"title":"ico","uri":"https://slippytrumpet.io/tags/ico/"},{"title":"iot","uri":"https://slippytrumpet.io/tags/iot/"},{"title":"javscript","uri":"https://slippytrumpet.io/tags/javscript/"},{"title":"lan","uri":"https://slippytrumpet.io/tags/lan/"},{"title":"letsencrypt","uri":"https://slippytrumpet.io/tags/letsencrypt/"},{"title":"linux","uri":"https://slippytrumpet.io/tags/linux/"},{"title":"mk2","uri":"https://slippytrumpet.io/tags/mk2/"},{"title":"mqtt","uri":"https://slippytrumpet.io/tags/mqtt/"},{"title":"multirotor","uri":"https://slippytrumpet.io/tags/multirotor/"},{"title":"nodeMCU","uri":"https://slippytrumpet.io/tags/nodemcu/"},{"title":"octoprint","uri":"https://slippytrumpet.io/tags/octoprint/"},{"title":"pi-zero-w","uri":"https://slippytrumpet.io/tags/pi-zero-w/"},{"title":"prusa-original","uri":"https://slippytrumpet.io/tags/prusa-original/"},{"title":"puckjs","uri":"https://slippytrumpet.io/tags/puckjs/"},{"title":"quadcopter","uri":"https://slippytrumpet.io/tags/quadcopter/"},{"title":"raspberry","uri":"https://slippytrumpet.io/tags/raspberry/"},{"title":"raspberry pi","uri":"https://slippytrumpet.io/tags/raspberry-pi/"},{"title":"raspberrypi","uri":"https://slippytrumpet.io/tags/raspberrypi/"},{"title":"remote control","uri":"https://slippytrumpet.io/tags/remote-control/"},{"title":"rethinkdb","uri":"https://slippytrumpet.io/tags/rethinkdb/"},{"title":"riotjs","uri":"https://slippytrumpet.io/tags/riotjs/"},{"title":"startups","uri":"https://slippytrumpet.io/tags/startups/"},{"title":"systemd","uri":"https://slippytrumpet.io/tags/systemd/"},{"title":"TLS","uri":"https://slippytrumpet.io/tags/tls/"},{"title":"webbluetooth","uri":"https://slippytrumpet.io/tags/webbluetooth/"},{"title":"websockets","uri":"https://slippytrumpet.io/tags/websockets/"}]}